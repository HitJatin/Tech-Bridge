{"version":3,"sources":["components/header/header.js","components/main/zone/zone.js","components/main/main.js","components/zone-content/zone-section/zone-section.js","components/zone-content/zone-content.js","components/start-page/start-page.js","components/signup/signup.js","components/login/login.js","App.js","reportWebVitals.js","index.js"],"names":["Header","id","color","dark","fixed","href","Component","Zone","button","this","props","zoneData","status","disabled","to","name","className","tag","desc","Main","zonesJson","zones","i","length","push","lessonProgress","zonesHtml","userZones","resumeZone","j","zoneName","find","zone","VideoButton","onClick","ExerciseButton","ZoneSection","state","openId","startTime","sectionProgress","toggle","bind","sendExerciseResponse","setState","Math","round","Date","getTime","exerciseIndex","exercises","response","sectionData","exerciseData","exerciseHtml","completeVideoButtton","exercisesIndex","video","toggleIndex","code","isOpen","type","placeholder","value","onChange","e","target","completeVideo","width","controls","src","CustomButton","sectionStatus","ZoneContent","error","isLoaded","sectionsJson","activeCardNo","completeExercise","fetch","process","then","res","json","result","sections","cardToggleNo","zoneIndex","sectionIndex","zoneProgress","updateLessonProgress","exerciseResponse","endTime","lessonProgressDetails","JSON","stringify","email","myHeaders","Headers","append","requestOptions","method","headers","body","redirect","console","log","mainApis","updateLesson","text","parse","alert","catch","message","sectionsHtml","sectionPos","newZoneJson","findIndex","toggleValue","ZoneRoute","useParams","StartPage","NavigateToStartPage","nav","navigate","useNavigate","SignUp","emails","signUpAccount","signUpApis","getEmails","event","preventDefault","password","confirmPassword","newUserData","sendSignUpToServerAndReportToUser","dataToSend","createUser","statusCode","onSubmit","for","innerRef","input","NavigateToHome","Login","login","loginApis","loginUser","authorized","getLessonProgressAndEmail","App","baseFile","exact","path","element","apis","signUp","main","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67f06e50.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Navbar, NavbarBrand } from \"reactstrap\";\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"navbar\">\r\n                <Navbar\r\n                    color=\"dark\"\r\n                    dark\r\n                    fixed=\"top\"\r\n                >\r\n                    <NavbarBrand href=\"/\">\r\n                        Tech-Bridge\r\n                    </NavbarBrand>\r\n                </Navbar>\r\n            </div>\r\n            // <>\r\n            //     <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\r\n            //         <Container>\r\n            //             <Navbar.Brand href=\"#home\">\r\n            //                 <img\r\n            //                     alt=\"\"\r\n            //                     src={`${process.env.PUBLIC_URL}/logo192.png`}\r\n            //                     width=\"30\"\r\n            //                     height=\"30\"\r\n            //                     className=\"d-inline-block align-top\"\r\n            //                 />{' '}\r\n            //                 Tech Bridge\r\n            //             </Navbar.Brand>\r\n            //         </Container>\r\n            //     </Navbar>\r\n            // </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport \"./zone.css\";\r\nimport { Button, Card, CardBody, CardTitle, CardText } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Zone extends Component {\r\n    render() {\r\n        const { zoneData, status } = this.props;\r\n        let button;\r\n        if (status === \"locked\")\r\n            button = <Button color=\"danger\" disabled>Locked</Button>;\r\n        if (status === \"completed\")\r\n            button = <Link to={`/zone/${zoneData.name}`}><Button color=\"success\">Completed</Button></Link>;\r\n        if (status === \"start\")\r\n            button = <Link to={`/zone/${zoneData.name}`}><Button color=\"primary\">Start</Button></Link>;\r\n        if (status === \"inprogress\")\r\n            button = <Link to={`/zone/${zoneData.name}`}><Button color=\"warning\">Resume</Button></Link>;\r\n        return (\r\n            <Card className=\"zone\">\r\n                <CardBody>\r\n                    <CardTitle tag=\"h5\">{zoneData.name}</CardTitle>\r\n                    {/* <CardSubtitle\r\n                        className=\"mb-2 text-muted\"\r\n                        tag=\"h6\"\r\n                    >\r\n                        Card subtitle\r\n                    </CardSubtitle> */}\r\n                    <CardText>{zoneData.desc}</CardText>\r\n                    {button}\r\n                </CardBody>\r\n            </Card>)\r\n    }\r\n}\r\n\r\nexport default Zone;","import React, { Component } from \"react\";\r\nimport Zone from \"./zone/zone\";\r\n\r\nclass Main extends Component {\r\n    render() {\r\n        const { zonesJson } = this.props;\r\n        let zones = [];\r\n        for (let i = 0; i < zonesJson.length; i++) {\r\n            zones.push(zonesJson[i].name);\r\n        }\r\n        const { lessonProgress } = this.props;\r\n        let zonesHtml = [], i = 0, userZones = [], resumeZone = false;\r\n        for (let j = 0; j < lessonProgress.length; j++) {\r\n            if (lessonProgress[j].status)\r\n                userZones.push(lessonProgress[j].zoneName)\r\n            else {\r\n                resumeZone = true;\r\n            }\r\n        }\r\n        while (i < zones.length) {\r\n            if (userZones.find(zone => zone === zones[i])) {\r\n                zonesHtml.push(<Zone zoneData={zonesJson[i]} status=\"completed\" />)\r\n                i++;\r\n            }\r\n            else\r\n                break;\r\n        }\r\n        if (resumeZone)\r\n            zonesHtml.push(<Zone zoneData={zonesJson[i]} status=\"inprogress\" />)\r\n        else if (i < zones.length)\r\n            zonesHtml.push(<Zone zoneData={zonesJson[i]} status=\"start\" />)\r\n        i++;\r\n        while (i < zones.length) {\r\n            zonesHtml.push(<Zone zoneData={zonesJson[i]} status=\"locked\" />);\r\n            i++;\r\n        }\r\n        return (\r\n            <div className=\"zones\">{zonesHtml}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React, { Component } from \"react\";\r\n\r\nimport { Button, Card, CardBody, CardHeader, CardTitle, Collapse, Input } from \"reactstrap\";\r\n\r\nclass VideoButton extends Component {\r\n    render() {\r\n        if (this.props.status)\r\n            return (<Button className=\"instructionFunction\" color=\"success\" onClick={this.props.onClick}>Watch Again</Button>);\r\n        else\r\n            return (<Button className=\"instructionFunction\" color=\"primary\" onClick={this.props.onClick}>Play</Button>)\r\n    }\r\n}\r\n\r\nclass ExerciseButton extends Component {\r\n    render() {\r\n        if (this.props.status === \"completed\")\r\n            return (<Button className=\"instructionFunction\" color=\"success\" onClick={this.props.onClick}>Completed</Button>);\r\n        else if (this.props.status === \"start\")\r\n            return (<Button className=\"instructionFunction\" color=\"primary\" onClick={this.props.onClick}>Start</Button>);\r\n        else if (this.props.status === \"locked\")\r\n            return (<Button className=\"instructionFunction\" color=\"danger\" onClick={this.props.onClick} disabled>Locked</Button>);\r\n        else\r\n            return (<></>);\r\n    }\r\n}\r\n\r\nclass ZoneSection extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            openId: 0,\r\n            startTime: \"\",\r\n            sectionProgress: this.props.sectionProgress\r\n        }\r\n        this.toggle = this.toggle.bind(this);\r\n        this.sendExerciseResponse = this.sendExerciseResponse.bind(this);\r\n    }\r\n\r\n    toggle(openId) {\r\n        if (this.state.openId === openId)\r\n            this.setState({\r\n                openId: 0\r\n            });\r\n        else\r\n            this.setState({\r\n                openId: openId,\r\n                startTime: Math.round(new Date().getTime()/1000)\r\n            });\r\n    }\r\n\r\n    sendExerciseResponse(exerciseIndex){\r\n        this.props.sendExerciseResponse(exerciseIndex, this.state.sectionProgress.exercises[exerciseIndex].response, this.state.startTime);\r\n    }\r\n\r\n    render() {\r\n        const { sectionData } = this.props;\r\n        const exerciseData = sectionData.exercises, exerciseHtml = [], completeVideoButtton = [];\r\n        let exercisesIndex = 0;\r\n        if (!this.state.sectionProgress.video)\r\n            completeVideoButtton.push(<Button color=\"primary\" onClick={this.props.completeVideo}>Mark Video as complete</Button>)\r\n        else {\r\n            while (exercisesIndex < exerciseData.length && this.state.sectionProgress.exercises[exercisesIndex].status) {\r\n                let toggleIndex = exercisesIndex + 2;\r\n                exerciseHtml.push(\r\n                    <Card>\r\n                        <CardHeader className=\"instructionHeader\">\r\n                            <CardTitle className=\"instruction\">{exerciseData[exercisesIndex].code}</CardTitle>\r\n                            <ExerciseButton status=\"completed\" onClick={() => this.toggle(toggleIndex)} />\r\n                        </CardHeader>\r\n                        <Collapse isOpen={this.state.openId === (toggleIndex)}>\r\n                            <CardBody>\r\n                                {exerciseData[exercisesIndex].desc}\r\n                                <Input\r\n                                    type=\"textarea\"\r\n                                    placeholder=\"Enter your response\" \r\n                                    value={this.state.sectionProgress.exercises[exercisesIndex].response}\r\n                                    onChange={(e) => {\r\n                                        let sectionProgress = this.state.sectionProgress;\r\n                                        sectionProgress.exercises[toggleIndex-2].response = e.target.value\r\n                                        this.setState({\r\n                                            sectionProgress : sectionProgress\r\n                                        })\r\n                                    }} \r\n                                />\r\n                                <Button color=\"primary\" onClick={() => this.sendExerciseResponse(toggleIndex-2)} >Submit</Button>\r\n                            </CardBody>\r\n                        </Collapse>\r\n                    </Card>\r\n                )\r\n                exercisesIndex++;\r\n            }\r\n            if (exercisesIndex < exerciseData.length) {\r\n                let toggleIndex = exercisesIndex + 2;\r\n                exerciseHtml.push(\r\n                    <Card>\r\n                        <CardHeader className=\"instructionHeader\">\r\n                            <CardTitle className=\"instruction\">{exerciseData[exercisesIndex].code}</CardTitle>\r\n                            <ExerciseButton status=\"start\" onClick={() => this.toggle(toggleIndex)} />\r\n                        </CardHeader>\r\n                        <Collapse isOpen={this.state.openId === (toggleIndex)}>\r\n                            <CardBody>\r\n                                {exerciseData[exercisesIndex].desc}\r\n                                <Input\r\n                                    type=\"textarea\"\r\n                                    placeholder=\"Enter your response\" \r\n                                    value={this.state.sectionProgress.exercises[exercisesIndex].response}\r\n                                    onChange={(e) => {\r\n                                        let sectionProgress = this.state.sectionProgress;\r\n                                        sectionProgress.exercises[toggleIndex-2].response = e.target.value\r\n                                        this.setState({\r\n                                            sectionProgress : sectionProgress\r\n                                        })\r\n                                    }} \r\n                                />\r\n                                <Button color=\"primary\" onClick={() => this.sendExerciseResponse(toggleIndex-2)} >Submit</Button>\r\n                            </CardBody>\r\n                        </Collapse>\r\n                    </Card>\r\n                )\r\n                exercisesIndex++;\r\n            }\r\n        }\r\n        while (exercisesIndex < exerciseData.length) {\r\n            let toggleIndex = exercisesIndex + 2;\r\n            exerciseHtml.push(\r\n                <Card>\r\n                    <CardHeader className=\"instructionHeader\">\r\n                        <CardTitle className=\"instruction\">{exerciseData[exercisesIndex].code}</CardTitle>\r\n                        <ExerciseButton status=\"locked\" onClick={() => this.toggle(toggleIndex)} />\r\n                    </CardHeader>\r\n                    <Collapse isOpen={this.state.openId === (toggleIndex)}>\r\n                        <CardBody>\r\n                            {exerciseData[exercisesIndex].desc}\r\n                            <Input type=\"textarea\" placeholder=\"Enter your response\" />\r\n                            <Button color=\"primary\">Submit</Button>\r\n                        </CardBody>\r\n                    </Collapse>\r\n                </Card>\r\n            )\r\n            exercisesIndex++;\r\n        }\r\n        return (<div>\r\n            <Card>\r\n                <CardHeader className=\"instructionHeader\">\r\n                    <CardTitle className=\"instruction\">Play Course Video</CardTitle>\r\n                    <VideoButton status={this.state.sectionProgress.video} onClick={() => this.toggle(1)} />\r\n                </CardHeader>\r\n                <Collapse isOpen={this.state.openId === 1}>\r\n                    <CardBody>\r\n                        <video width=\"400\" controls>\r\n                            <source src={sectionData.video} type=\"video/mp4\" />\r\n                            Your browser doesn't support HTML video\r\n                        </video>\r\n                        {completeVideoButtton}\r\n                    </CardBody>\r\n                </Collapse>\r\n            </Card>\r\n            {exerciseHtml}\r\n        </div>)\r\n    }\r\n}\r\n\r\n\r\nexport default ZoneSection;","import React, { Component } from \"react\";\r\nimport \"./zone-content.css\"\r\n\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Card, CardHeader, CardTitle, Button, Collapse, CardBody } from \"reactstrap\";\r\nimport ZoneSection from \"./zone-section/zone-section\";\r\n\r\nconst ZoneRoute = (props) => {\r\n    const params = useParams();\r\n    const zoneName = params.zoneName;\r\n    return (<ZoneContent zoneName={zoneName} lessonProgress={props.lessonProgress} mainApis={props.mainApis} email={props.email} />)\r\n}\r\n\r\nclass CustomButton extends Component {\r\n    render() {\r\n        const { sectionStatus, onClick } = this.props;\r\n        if (sectionStatus === \"completed\")\r\n            return (<Button className=\"instructionFunction\" color=\"success\" onClick={onClick}>Completed</Button>);\r\n        else if (sectionStatus === \"resume\")\r\n            return (<Button className=\"instructionFunction\" color=\"warning\" onClick={onClick}>Resume</Button>);\r\n        else if (sectionStatus === \"start\")\r\n            return (<Button className=\"instructionFunction\" color=\"primary\" onClick={onClick}>Start</Button>);\r\n        else if (sectionStatus === \"locked\")\r\n            return (<Button className=\"instructionFunction\" color=\"danger\" disabled>Locked</Button>);\r\n        else\r\n            return (<></>);\r\n    }\r\n}\r\n\r\nclass ZoneContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            sectionsJson: [],\r\n            activeCardNo: 0,\r\n            lessonProgress: this.props.lessonProgress\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n        this.completeVideo = this.completeVideo.bind(this);\r\n        this.completeExercise = this.completeExercise.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(process.env.PUBLIC_URL + \"/data/foundation/\" + this.props.zoneName + \".json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        sectionsJson: result.sections\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    toggle(cardToggleNo) {\r\n        if (cardToggleNo === this.state.activeCardNo)\r\n            this.setState({\r\n                activeCardNo: 0\r\n            })\r\n        else\r\n            this.setState({\r\n                activeCardNo: cardToggleNo\r\n            })\r\n    }\r\n\r\n    completeVideo(zoneIndex, sectionIndex){\r\n        let lessonProgress = this.state.lessonProgress;\r\n        lessonProgress[zoneIndex].zoneProgress[sectionIndex].video = true;\r\n        this.updateLessonProgress(lessonProgress);\r\n        this.setState({\r\n            lessonProgress: lessonProgress\r\n        })\r\n    }\r\n\r\n    completeExercise(zoneIndex, sectionIndex, exerciseIndex, exerciseResponse, startTime){\r\n        let lessonProgress = this.state.lessonProgress;\r\n        lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises[exerciseIndex].response = exerciseResponse;\r\n        lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises[exerciseIndex].startTime = startTime;\r\n        lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises[exerciseIndex].endTime = Math.round(new Date().getTime()/1000);\r\n        lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises[exerciseIndex].status = true;\r\n        if(lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises.length === (exerciseIndex+1)){\r\n            lessonProgress[zoneIndex].zoneProgress[sectionIndex].status = true;\r\n            if(lessonProgress[zoneIndex].zoneProgress.length === (sectionIndex+1))\r\n            lessonProgress[zoneIndex].status = true\r\n        }\r\n        this.updateLessonProgress(lessonProgress);\r\n        this.setState({\r\n            lessonProgress: lessonProgress\r\n        })\r\n    }\r\n\r\n    updateLessonProgress(lessonProgress){\r\n        var lessonProgressDetails = JSON.stringify({\r\n            \"email\": this.props.email,\r\n            \"lessonProgress\": lessonProgress\r\n        });\r\n        let myHeaders = new Headers();\r\n        myHeaders.append(\"Content-Type\", \"application/json\");\r\n        let requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: lessonProgressDetails,\r\n            redirect: 'follow'\r\n        };\r\n        console.log(requestOptions);\r\n        console.log(lessonProgress);\r\n        fetch(this.props.mainApis.updateLesson, requestOptions)\r\n            .then(response => response.text())\r\n            .then(response => {\r\n                let result = JSON.parse(response);\r\n                if (result.status !== 200) {\r\n                    alert(\"Couldn't update progress to server\");\r\n                }\r\n            })\r\n            .catch(error => {\r\n                alert(\"Couldn't update progress to server\");\r\n                console.log('error', error)\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, sectionsJson, lessonProgress } = this.state;\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            let sectionsHtml = [], sectionPos = 0, zoneProgress, zoneIndex;\r\n            const { zoneName } = this.props;\r\n            if (!lessonProgress.find(zone => zone.zoneName === zoneName)) {\r\n                let newZoneJson = {\r\n                    \"zoneName\": zoneName,\r\n                    \"status\": false,\r\n                    \"zoneProgress\": []\r\n                }\r\n                for (let i = 0; i < sectionsJson.length; i++) {\r\n                    newZoneJson.zoneProgress.push({\r\n                        \"status\": false,\r\n                        \"video\": false,\r\n                        \"exercises\": []\r\n                    })\r\n                    for (let j = 0; j < sectionsJson[i].exercises.length; j++) {\r\n                        newZoneJson.zoneProgress[i].exercises.push({\r\n                            \"status\": false,\r\n                            \"startTime\": \"\",\r\n                            \"endTime\": \"\",\r\n                            \"response\": \"\"\r\n                        })\r\n\r\n                    }\r\n                }\r\n                lessonProgress.push(newZoneJson);\r\n                this.setState({\r\n                    lessonProgress: lessonProgress\r\n                })\r\n            }\r\n            zoneProgress = lessonProgress.find(zone => zone.zoneName === zoneName).zoneProgress;\r\n            zoneIndex = lessonProgress.findIndex(zone => zone.zoneName === zoneName);\r\n            while (sectionPos < sectionsJson.length && zoneProgress[sectionPos].status === true) {\r\n                let toggleValue=sectionPos+1;\r\n                sectionsHtml.push(\r\n                    <Card>\r\n                        <CardHeader className=\"instructionHeader\">\r\n                            <CardTitle className=\"instruction\">{sectionsJson[sectionPos].desc}</CardTitle>\r\n                            <CustomButton sectionStatus=\"completed\" onClick={() => this.toggle(toggleValue)} />\r\n                        </CardHeader>\r\n                        <Collapse isOpen={this.state.activeCardNo === (toggleValue)}>\r\n                            <CardBody><ZoneSection sendExerciseResponse={(exerciseIndex, exerciseResponse, startTime) => this.completeExercise(zoneIndex, toggleValue-1, exerciseIndex, exerciseResponse, startTime)} sectionProgress={zoneProgress[sectionPos]} sectionData={sectionsJson[sectionPos]} /></CardBody>\r\n                        </Collapse>\r\n                    </Card>\r\n                );\r\n                sectionPos++;\r\n            }\r\n            if (sectionPos < sectionsJson.length) {\r\n                let sectionStatus;\r\n                if (zoneProgress[sectionPos].video === true)\r\n                    sectionStatus = \"resume\";\r\n                else\r\n                    sectionStatus = \"start\";\r\n                let toggleValue=sectionPos+1;\r\n                sectionsHtml.push(\r\n                    <Card>\r\n                        <CardHeader className=\"instructionHeader\">\r\n                            <CardTitle className=\"instruction\">{sectionsJson[sectionPos].desc}</CardTitle>\r\n                            <CustomButton sectionStatus={sectionStatus} onClick={() => this.toggle(toggleValue)} />\r\n                        </CardHeader>\r\n                        <Collapse isOpen={this.state.activeCardNo === (toggleValue)}>\r\n                            <CardBody><ZoneSection sendExerciseResponse={(exerciseIndex, exerciseResponse, startTime) => this.completeExercise(zoneIndex, toggleValue-1, exerciseIndex, exerciseResponse, startTime)} sectionProgress={zoneProgress[sectionPos]} sectionData={sectionsJson[sectionPos]} /></CardBody>\r\n                        </Collapse>\r\n                    </Card>\r\n                );\r\n                sectionPos++;\r\n            }\r\n            while (sectionPos < sectionsJson.length) {\r\n                let toggleValue=sectionPos+1;\r\n                sectionsHtml.push(\r\n                    <Card>\r\n                        <CardHeader className=\"instructionHeader\">\r\n                            <CardTitle className=\"instruction\">{sectionsJson[sectionPos].desc}</CardTitle>\r\n                            <CustomButton sectionStatus=\"locked\" onClick={() => this.toggle(toggleValue)} />\r\n                        </CardHeader>\r\n                        <Collapse isOpen={this.state.activeCardNo === (toggleValue)}>\r\n                            <CardBody><ZoneSection completeVideo={() => this.completeVideo(zoneIndex, toggleValue-1)} sectionProgress={zoneProgress[sectionPos]} sectionData={sectionsJson[sectionPos]} /></CardBody>\r\n                        </Collapse>\r\n                    </Card>\r\n                );\r\n                sectionPos++;\r\n            }\r\n            return (\r\n                <div className=\"sections\">\r\n                    {sectionsHtml}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default ZoneRoute;","import React, { Component } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './start-page.css';\r\n\r\nclass StartPage extends Component {\r\n    render() {\r\n        return (<div id='start_page'>\r\n            <div id='loginOptions'>\r\n                <Link to={`/signup`}><Button color=\"primary\" className='loginButtons'>Sign Up</Button></Link>\r\n                <div id='or'>OR</div>\r\n                <Link to={`/login`}><Button color=\"primary\" className='loginButtons'>Login</Button></Link>\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default StartPage;","import React, { Component } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\r\n\r\nconst NavigateToStartPage = ({nav}) => {\r\n    const navigate = useNavigate();\r\n\r\n    if(nav)\r\n    navigate('/startpage');\r\n\r\n    return (\r\n        <></>\r\n    );\r\n}\r\n\r\n\r\nclass SignUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            emails: [],\r\n            navigate: false\r\n        }\r\n        this.signUpAccount = this.signUpAccount.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        fetch(this.props.signUpApis.getEmails)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        emails: result\r\n                    });\r\n                }\r\n            )\r\n    }\r\n    signUpAccount(event) {\r\n        event.preventDefault();\r\n        if (this.state.emails.find(email => email === this.email.value)) {\r\n            alert(\"Account with this email altready exists\");\r\n            return;\r\n        }\r\n        if (this.password.value !== this.confirmPassword.value) {\r\n            alert(\"Passwords didn't match\");\r\n            return;\r\n        }\r\n        var newUserData = JSON.stringify({\r\n            \"emailId\": this.email.value,\r\n            \"name\": this.name.value,\r\n            \"password\": this.password.value\r\n        });\r\n        this.sendSignUpToServerAndReportToUser(newUserData);\r\n    }\r\n    sendSignUpToServerAndReportToUser(dataToSend) {\r\n        let myHeaders = new Headers();\r\n        myHeaders.append(\"Content-Type\", \"application/json\");\r\n        let requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: dataToSend,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        fetch(this.props.signUpApis.createUser, requestOptions)\r\n            .then(response => response.text())\r\n            .then(response => {\r\n                let result = JSON.parse(response);\r\n                if (result.statusCode === 200) {\r\n                    alert(result.body);\r\n                    this.setState({\r\n                        navigate: true\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                alert(\"Account Creation Failed\");\r\n                console.log('error', error)\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.signUpAccount}>\r\n                <FormGroup>\r\n                    <Label for=\"email\">\r\n                        Email\r\n                    </Label>\r\n                    <Input\r\n                        id=\"signupEmail\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter your email ID\"\r\n                        type=\"email\"\r\n                        innerRef={(input) => this.email = input}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"name\">\r\n                        Name\r\n                    </Label>\r\n                    <Input\r\n                        id=\"signupName\"\r\n                        name=\"name\"\r\n                        placeholder=\"Enter your Name\"\r\n                        type=\"text\"\r\n                        innerRef={(input) => this.name = input}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"password\">\r\n                        Password\r\n                    </Label>\r\n                    <Input\r\n                        id=\"signupPassword\"\r\n                        name=\"password\"\r\n                        placeholder=\"Enter password\"\r\n                        type=\"password\"\r\n                        innerRef={(input) => this.password = input}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"confirmPassword\">\r\n                        Confirm Password\r\n                    </Label>\r\n                    <Input\r\n                        id=\"signupConfirmPassword\"\r\n                        name=\"confirmPassword\"\r\n                        placeholder=\"Re-Enter your password\"\r\n                        type=\"password\"\r\n                        innerRef={(input) => this.confirmPassword = input}\r\n                    />\r\n                </FormGroup>\r\n                <Button type=\"submit\" color=\"primary\">\r\n                    Submit\r\n                </Button>\r\n                <NavigateToStartPage nav={this.state.navigate} />\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SignUp;","import React, { Component } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\r\n\r\nconst NavigateToHome = ({ nav }) => {\r\n    const navigate = useNavigate();\r\n\r\n    if (nav)\r\n        navigate('/home');\r\n\r\n    return (\r\n        <></>\r\n    );\r\n}\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            navigate: false\r\n        }\r\n        this.login = this.login.bind(this);\r\n    }\r\n    login(event) {\r\n        event.preventDefault();\r\n        fetch(`${this.props.loginApis.loginUser}?email=${this.email.value}&password=${this.password.value}`)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    if (result.authorized) {\r\n                        this.props.getLessonProgressAndEmail(result.lessonProgress, this.email.value)\r\n                        this.setState({\r\n                            navigate: true\r\n                        })\r\n                    }\r\n                    else\r\n                    alert(\"Incorrect email or password\");\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.login}>\r\n                <FormGroup>\r\n                    <Label for=\"email\">\r\n                        Email\r\n                    </Label>\r\n                    <Input\r\n                        id=\"loginEmail\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter your email ID\"\r\n                        type=\"email\"\r\n                        innerRef={(input) => this.email = input}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"password\">\r\n                        Password\r\n                    </Label>\r\n                    <Input\r\n                        id=\"loginPassword\"\r\n                        name=\"password\"\r\n                        placeholder=\"Enter password\"\r\n                        type=\"password\"\r\n                        innerRef={(input) => this.password = input}\r\n                    />\r\n                </FormGroup>\r\n                <Button type=\"submit\" color=\"primary\">\r\n                    Submit\r\n                </Button>\r\n                <NavigateToHome nav={this.state.navigate} />\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Spinner } from 'reactstrap';\r\nimport { HashRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\r\n\r\nimport Header from './components/header/header';\r\nimport Main from './components/main/main';\r\nimport ZoneRoute from './components/zone-content/zone-content'\r\nimport StartPage from './components/start-page/start-page';\r\nimport SignUp from './components/signup/signup';\r\nimport Login from './components/login/login';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      baseFile: false,\r\n      lessonProgress: false,\r\n      zonesJson:[],\r\n      email:\"\"\r\n    }\r\n    this.getLessonProgressAndEmail = this.getLessonProgressAndEmail.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    fetch(process.env.PUBLIC_URL + \"/data/index.json\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            baseFile: result\r\n          });\r\n        }\r\n      )\r\n      fetch(process.env.PUBLIC_URL + \"/data/roadmap_foundation.json\")\r\n      .then(res => res.json())\r\n      .then(\r\n          (result) => {\r\n              this.setState({\r\n                  zonesJson: result.zones\r\n              });\r\n          }\r\n      )\r\n  }\r\n  getLessonProgressAndEmail(lessonProgress, email) {\r\n    this.setState({\r\n      lessonProgress: lessonProgress,\r\n      email: email\r\n    });\r\n  }\r\n  render() {\r\n    if (this.state.baseFile)\r\n    return (\r\n          <div className=\"App\">\r\n            <Router>\r\n              <Header />\r\n              <Routes>\r\n                <Route exact path=\"/\" element={<Navigate to=\"/startpage\" />} />\r\n                <Route exact path=\"/startpage\" element={<StartPage />} />\r\n                <Route exact path=\"/signup\" element={<SignUp signUpApis={this.state.baseFile.apis.signUp} />} />\r\n                <Route exact path=\"/login\" element={<Login loginApis={this.state.baseFile.apis.login} getLessonProgressAndEmail={this.getLessonProgressAndEmail} />} />\r\n                <Route exact path=\"/home\" element={<Main lessonProgress={this.state.lessonProgress} zonesJson={this.state.zonesJson} />} />\r\n                <Route exact path=\"/zone/:zoneName\" element={<ZoneRoute lessonProgress={this.state.lessonProgress} mainApis={this.state.baseFile.apis.main} email={this.state.email} />} />\r\n              </Routes>\r\n            </Router>\r\n          </div>\r\n        );\r\n      else\r\n        return (\r\n          <div className=\"App\">\r\n            <Header />\r\n            <div id=\"loadingApp\">\r\n              <Spinner id='appSpinner'>\r\n                Loading...\r\n              </Spinner>\r\n            </div>\r\n          </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}