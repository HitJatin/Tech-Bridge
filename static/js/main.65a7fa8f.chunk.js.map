{"version":3,"sources":["components/header/header.js","components/main/zone/zone.js","components/main/main.js","components/zone-content/zone-section/zone-section.js","components/zone-content/zone-content.js","components/start-page/start-page.js","components/signup/signup.js","components/login/login.js","App.js","reportWebVitals.js","index.js"],"names":["Header","id","color","dark","fixed","href","Component","Zone","button","this","props","zoneData","status","zoneDesc","disabled","to","name","push","desc","className","tag","Main","zonesJson","zones","i","length","lessonProgress","zonesHtml","userZones","resumeZone","j","zoneName","find","zone","VideoButton","onClick","ExerciseButton","ZoneSection","state","openId","startTime","sectionProgress","toggle","bind","sendExerciseResponse","completeVideo","setState","Math","round","Date","getTime","exerciseIndex","exercises","response","sectionData","exerciseData","exerciseHtml","completeVideoButtton","exercisesIndex","video","toggleIndex","code","isOpen","type","placeholder","value","onChange","e","target","width","controls","src","ZoneContent","error","isLoaded","sectionsJson","activeCardNo","room","completeExercise","fetchSectionsJson","getRoomNo","prevProps","console","log","fetch","process","then","res","json","result","sections","activeSectionIndex","zoneProgress","roomManagementApis","email","roomsName","cardToggleNo","zoneIndex","sectionIndex","updateLessonProgress","exerciseResponse","updateRoom","endTime","lessonProgressDetails","JSON","stringify","myHeaders","Headers","append","requestOptions","method","headers","body","redirect","mainApis","updateLesson","text","parse","alert","catch","message","sectionsHtml","sectionPos","moveToNextZone","newZoneJson","findIndex","toggleValue","targetId","accordionId","roomInfo","open","ZoneRoute","useParams","StartPage","NavigateToStartPage","nav","navigate","useNavigate","SignUp","emails","signUpAccount","signUpApis","getEmails","event","preventDefault","password","confirmPassword","newUserData","sendSignUpToServerAndReportToUser","dataToSend","createUser","statusCode","onSubmit","for","innerRef","input","NavigateToHome","Login","login","loginApis","loginUser","authorized","getLessonProgressEmailAndUserName","App","baseFile","userName","exact","path","element","apis","signUp","main","roomManagement","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6VAGMA,E,4JACF,WACI,OACI,qBAAKC,GAAG,SAAR,SACI,cAAC,IAAD,CACIC,MAAM,OACNC,MAAI,EACJC,MAAM,MAHV,SAKI,cAAC,IAAD,CAAaC,KAAK,IAAlB,iC,GATCC,aAkBNN,IChBTO,G,kKACF,WACI,IACIC,EADJ,EAA6BC,KAAKC,MAA1BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OACNC,EAAS,GAYrB,MAXe,WAAXD,IACAJ,EAAS,cAAC,IAAD,CAAQN,MAAM,SAASY,UAAQ,EAA/B,qBACE,cAAXF,IACAJ,EAAS,cAAC,IAAD,CAAMO,GAAE,gBAAWJ,EAASK,MAA5B,SAAoC,cAAC,IAAD,CAAQd,MAAM,UAAd,0BAClC,UAAXU,IACAJ,EAAS,cAAC,IAAD,CAAMO,GAAE,gBAAWJ,EAASK,MAA5B,SAAoC,cAAC,IAAD,CAAQd,MAAM,UAAd,sBAClC,eAAXU,IACAJ,EAAS,cAAC,IAAD,CAAMO,GAAE,gBAAWJ,EAASK,MAA5B,SAAoC,cAAC,IAAD,CAAQd,MAAM,UAAd,uBACnC,UAAXU,GAAiC,eAAXA,GACrBC,EAASI,KAAK,cAAC,IAAD,UAAWN,EAASO,QAGlC,cAAC,IAAD,CAAMC,UAAU,OAAhB,SACI,eAAC,IAAD,CAAUA,UAAWP,EAArB,UACI,cAAC,IAAD,CAAWQ,IAAI,KAAf,SAAqBT,EAASK,OAO7BH,EACAL,W,GA1BFF,cAgCJC,IClCTc,E,4JACF,WAGI,IAFA,IAAQC,EAAcb,KAAKC,MAAnBY,UACJC,EAAQ,GACHC,EAAI,EAAGA,EAAIF,EAAUG,OAAQD,IAClCD,EAAMN,KAAKK,EAAUE,GAAGR,MAI5B,IAFA,IAAQU,EAAmBjB,KAAKC,MAAxBgB,eACJC,EAAY,GAAIH,EAAI,EAAGI,EAAY,GAAIC,GAAa,EAC/CC,EAAI,EAAGA,EAAIJ,EAAeD,OAAQK,IACnCJ,EAAeI,GAAGlB,OAClBgB,EAAUX,KAAKS,EAAeI,GAAGC,UAEjCF,GAAa,EAGrB,KAAOL,EAAID,EAAME,QACTG,EAAUI,MAAK,SAAAC,GAAI,OAAIA,IAASV,EAAMC,OACtCG,EAAUV,KAAK,cAAC,EAAD,CAAMN,SAAUW,EAAUE,GAAIZ,OAAO,eACpDY,IAUR,IALIK,EACAF,EAAUV,KAAK,cAAC,EAAD,CAAMN,SAAUW,EAAUE,GAAIZ,OAAO,gBAC/CY,EAAID,EAAME,QACfE,EAAUV,KAAK,cAAC,EAAD,CAAMN,SAAUW,EAAUE,GAAIZ,OAAO,WACxDY,IACOA,EAAID,EAAME,QACbE,EAAUV,KAAK,cAAC,EAAD,CAAMN,SAAUW,EAAUE,GAAIZ,OAAO,YACpDY,IAEJ,OACI,qBAAKL,UAAU,QAAf,SAAwBQ,Q,GAlCjBrB,aAuCJe,ICtCTa,G,kKACF,WACI,OAAIzB,KAAKC,MAAME,OACH,cAAC,IAAD,CAAQO,UAAU,sBAAsBjB,MAAM,UAAUiC,QAAS1B,KAAKC,MAAMyB,QAA5E,yBAEA,cAAC,IAAD,CAAQhB,UAAU,sBAAsBjB,MAAM,UAAUiC,QAAS1B,KAAKC,MAAMyB,QAA5E,sB,GALM7B,cASpB8B,E,4JACF,WACI,MAA0B,cAAtB3B,KAAKC,MAAME,OACH,cAAC,IAAD,CAAQO,UAAU,sBAAsBjB,MAAM,UAAUiC,QAAS1B,KAAKC,MAAMyB,QAA5E,uBACmB,UAAtB1B,KAAKC,MAAME,OACR,cAAC,IAAD,CAAQO,UAAU,sBAAsBjB,MAAM,UAAUiC,QAAS1B,KAAKC,MAAMyB,QAA5E,mBACmB,WAAtB1B,KAAKC,MAAME,OACR,cAAC,IAAD,CAAQO,UAAU,sBAAsBjB,MAAM,SAASiC,QAAS1B,KAAKC,MAAMyB,QAASrB,UAAQ,EAA5F,oBAEA,iC,GATSR,aAiKd+B,E,kDAnJX,WAAY3B,GAAQ,IAAD,8BACf,cAAMA,IACD4B,MAAQ,CACTC,OAAQ,EACRC,UAAW,GACXC,gBAAiB,EAAK/B,MAAM+B,iBAEhC,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBATN,E,0CAYnB,SAAOJ,GACC9B,KAAK6B,MAAMC,SAAWA,EACtB9B,KAAKqC,SAAS,CACVP,OAAQ,IAGZ9B,KAAKqC,SAAS,CACVP,OAAQA,EACRC,UAAWO,KAAKC,OAAM,IAAIC,MAAOC,UAAU,S,kCAIvD,SAAqBC,GACjB1C,KAAKC,MAAMkC,qBAAqBO,EAAe1C,KAAK6B,MAAMG,gBAAgBW,UAAUD,GAAeE,SAAU5C,KAAK6B,MAAME,WACxH/B,KAAKqC,SAAS,CACVP,OAAQ,M,2BAIhB,WACI9B,KAAKC,MAAMmC,gBACXpC,KAAKqC,SAAS,CACVP,OAAQ,M,oBAIhB,WAAU,IAAD,OACGe,EAAgB7C,KAAKC,MAArB4C,YACFC,EAAeD,EAAYF,UAAWI,EAAe,GAAIC,EAAuB,GAClFC,EAAiB,EACrB,GAAKjD,KAAK6B,MAAMG,gBAAgBkB,MAE3B,CACD,IADE,IAAD,aAEG,IAAIC,EAAcF,EAAiB,EACnCF,EAAavC,KACT,eAAC,IAAD,WACI,eAAC,IAAD,CAAYE,UAAU,oBAAtB,UACI,cAAC,IAAD,CAAWA,UAAU,cAArB,SAAoCoC,EAAaG,GAAgBG,OACjE,cAAC,EAAD,CAAgBjD,OAAO,YAAYuB,QAAS,kBAAM,EAAKO,OAAOkB,SAElE,cAAC,IAAD,CAAUE,OAAQ,EAAKxB,MAAMC,SAAYqB,EAAzC,SACI,eAAC,IAAD,WACKL,EAAaG,GAAgBxC,KAC9B,cAAC,IAAD,CACI6C,KAAK,WACLC,YAAY,sBACZC,MAAO,EAAK3B,MAAMG,gBAAgBW,UAAUM,GAAgBL,SAC5Da,SAAU,SAACC,GACP,IAAI1B,EAAkB,EAAKH,MAAMG,gBACjCA,EAAgBW,UAAUQ,EAAY,GAAGP,SAAWc,EAAEC,OAAOH,MAC7D,EAAKnB,SAAS,CACVL,gBAAkBA,OAI9B,cAAC,IAAD,CAAQvC,MAAM,UAAUiC,QAAS,kBAAM,EAAKS,qBAAqBgB,EAAY,IAA7E,6BAKhBF,KA5BGA,EAAiBH,EAAa9B,QAAUhB,KAAK6B,MAAMG,gBAAgBW,UAAUM,GAAgB9C,QAAS,IA8B7G,GAAI8C,EAAiBH,EAAa9B,OAAQ,CACtC,IAAImC,EAAcF,EAAiB,EACnCF,EAAavC,KACT,eAAC,IAAD,WACI,eAAC,IAAD,CAAYE,UAAU,oBAAtB,UACI,cAAC,IAAD,CAAWA,UAAU,cAArB,SAAoCoC,EAAaG,GAAgBG,OACjE,cAAC,EAAD,CAAgBjD,OAAO,QAAQuB,QAAS,kBAAM,EAAKO,OAAOkB,SAE9D,cAAC,IAAD,CAAUE,OAAQrD,KAAK6B,MAAMC,SAAYqB,EAAzC,SACI,eAAC,IAAD,WACKL,EAAaG,GAAgBxC,KAC9B,cAAC,IAAD,CACI6C,KAAK,WACLC,YAAY,sBACZC,MAAOxD,KAAK6B,MAAMG,gBAAgBW,UAAUM,GAAgBL,SAC5Da,SAAU,SAACC,GACP,IAAI1B,EAAkB,EAAKH,MAAMG,gBACjCA,EAAgBW,UAAUQ,EAAY,GAAGP,SAAWc,EAAEC,OAAOH,MAC7D,EAAKnB,SAAS,CACVL,gBAAkBA,OAI9B,cAAC,IAAD,CAAQvC,MAAM,UAAUiC,QAAS,kBAAM,EAAKS,qBAAqBgB,EAAY,IAA7E,6BAKhBF,UA5DJD,EAAqBxC,KAAK,cAAC,IAAD,CAAQf,MAAM,UAAUiC,QAAS,kBAAM,EAAKU,iBAA5C,qCA+D9B,IApEK,iBAqED,IAAIe,EAAcF,EAAiB,EACnCF,EAAavC,KACT,eAAC,IAAD,WACI,eAAC,IAAD,CAAYE,UAAU,oBAAtB,UACI,cAAC,IAAD,CAAWA,UAAU,cAArB,SAAoCoC,EAAaG,GAAgBG,OACjE,cAAC,EAAD,CAAgBjD,OAAO,SAASuB,QAAS,kBAAM,EAAKO,OAAOkB,SAE/D,cAAC,IAAD,CAAUE,OAAQ,EAAKxB,MAAMC,SAAYqB,EAAzC,SACI,eAAC,IAAD,WACKL,EAAaG,GAAgBxC,KAC9B,cAAC,IAAD,CAAO6C,KAAK,WAAWC,YAAY,wBACnC,cAAC,IAAD,CAAQ9D,MAAM,UAAd,6BAKhBwD,KAjBGA,EAAiBH,EAAa9B,QAAS,IAmB9C,OAAQ,gCACJ,eAAC,IAAD,WACI,eAAC,IAAD,CAAYN,UAAU,oBAAtB,UACI,cAAC,IAAD,CAAWA,UAAU,cAArB,+BACA,cAAC,EAAD,CAAaP,OAAQH,KAAK6B,MAAMG,gBAAgBkB,MAAOxB,QAAS,kBAAM,EAAKO,OAAO,SAEtF,cAAC,IAAD,CAAUoB,OAA8B,IAAtBrD,KAAK6B,MAAMC,OAA7B,SACI,eAAC,IAAD,WACI,wBAAO8B,MAAM,MAAMC,UAAQ,EAA3B,UACI,wBAAQC,IAAKjB,EAAYK,MAAOI,KAAK,cADzC,6CAICN,UAIZD,S,GA9IalD,aCDpBkE,E,kDACF,WAAY9D,GAAQ,IAAD,8BACf,cAAMA,IACD4B,MAAQ,CACTmC,MAAO,KACPC,UAAU,EACVC,aAAc,GACdC,aAAc,EACdlD,eAAgB,EAAKhB,MAAMgB,eAC3BK,SAAU,EAAKrB,MAAMqB,SACrB8C,KAAM,IAEV,EAAKnC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBACrB,EAAKmC,iBAAmB,EAAKA,iBAAiBnC,KAAtB,gBAbT,E,qDAgBnB,WACIlC,KAAKsE,oBACLtE,KAAKuE,c,gCAGT,SAAmBC,GACXA,EAAUlD,WAAatB,KAAKC,MAAMqB,WAClCtB,KAAKsE,oBACLtE,KAAKuE,YACLE,QAAQC,IAAI,mB,+BAIpB,WAAqB,IAAD,OAChBC,MAAMC,gCAA+C5E,KAAK6B,MAAMP,SAAW,SACtEuD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,EAAK3C,SAAS,CACV4B,UAAU,EACVC,aAAcc,EAAOC,SACrBd,aAAc,EAAKlE,MAAMiF,wBAGjC,SAAClB,GACG,EAAK3B,SAAS,CACV4B,UAAU,EACVD,e,uBAMpB,WAAa,IAAD,OACJxC,EAAOxB,KAAK6B,MAAMZ,eAAeM,MAAK,SAAAC,GAAI,OAAIA,EAAKF,WAAa,EAAKrB,MAAMqB,YAE/E,GADAmD,QAAQC,IAAIlD,GACRA,GACA,IAAKA,EAAKrB,OACN,IAAK,IAAIY,EAAI,EAAGA,EAAIS,EAAK2D,aAAanE,OAAQD,IAC1C,IAAKS,EAAK2D,aAAapE,GAAGZ,OAAQ,CAC9BwE,MAAM3E,KAAKC,MAAMmF,mBAAmBb,UAAY,UAAYvE,KAAKC,MAAMoF,MAAQ,4BAA8BrF,KAAK6B,MAAMP,SAAW,oBAAsBP,EAAI,IACxJ8D,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,EAAK3C,SAAS,CACV+B,KAAMY,EAAOM,eAGrB,SAACtB,GACGS,QAAQT,MAAMA,MAG1B,YAMZW,MAAM3E,KAAKC,MAAMmF,mBAAmBb,UAAY,UAAYvE,KAAKC,MAAMoF,MAAQ,4BAA8BrF,KAAK6B,MAAMP,SAAW,qBAC9HuD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,EAAK3C,SAAS,CACV+B,KAAMY,EAAOM,eAGrB,SAACtB,GACGS,QAAQT,MAAMA,Q,oBAMlC,SAAOuB,GACCA,IAAiBvF,KAAK6B,MAAMsC,aAC5BnE,KAAKqC,SAAS,CACV8B,aAAc,IAGlBnE,KAAKqC,SAAS,CACV8B,aAAcoB,M,2BAI1B,SAAcC,EAAWC,GACrB,IAAIxE,EAAiBjB,KAAK6B,MAAMZ,eAChCA,EAAeuE,GAAWL,aAAaM,GAAcvC,OAAQ,EAC7DlD,KAAK0F,qBAAqBzE,GAC1BjB,KAAKqC,SAAS,CACVpB,eAAgBA,M,8BAIxB,SAAiBuE,EAAWC,EAAc/C,EAAeiD,EAAkB5D,GACvE,IAAId,EAAiBjB,KAAK6B,MAAMZ,eAAgBkD,EAAenE,KAAK6B,MAAMsC,aAAcyB,GAAW,EACnG3E,EAAeuE,GAAWL,aAAaM,GAAc9C,UAAUD,GAAeE,SAAW+C,EACzF1E,EAAeuE,GAAWL,aAAaM,GAAc9C,UAAUD,GAAeX,UAAYA,EAC1Fd,EAAeuE,GAAWL,aAAaM,GAAc9C,UAAUD,GAAemD,QAAUvD,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KAC1HxB,EAAeuE,GAAWL,aAAaM,GAAc9C,UAAUD,GAAevC,QAAS,EACnFc,EAAeuE,GAAWL,aAAaM,GAAc9C,UAAU3B,SAAY0B,EAAgB,IAC3FzB,EAAeuE,GAAWL,aAAaM,GAActF,QAAS,EAC1Dc,EAAeuE,GAAWL,aAAanE,SAAYyE,EAAe,EAClExE,EAAeuE,GAAWrF,QAAS,EAEvCyF,GAAW,GAEf5F,KAAK0F,qBAAqBzE,GACtBjB,KAAK6B,MAAMqC,aAAauB,GAAc9C,UAAU3B,SAAY0B,EAAgB,GAC5EyB,IAEJnE,KAAKqC,SAAS,CACVpB,eAAgBA,EAChBkD,aAAcA,IAEfyB,GACH5F,KAAKuE,c,kCAGT,SAAqBtD,GACjB,IAAI6E,EAAwBC,KAAKC,UAAU,CACvC,MAAShG,KAAKC,MAAMoF,MACpB,eAAkBpE,IAElBgF,EAAY,IAAIC,QACpBD,EAAUE,OAAO,eAAgB,oBACjC,IAAIC,EAAiB,CACjBC,OAAQ,OACRC,QAASL,EACTM,KAAMT,EACNU,SAAU,UAEd7B,MAAM3E,KAAKC,MAAMwG,SAASC,aAAcN,GACnCvB,MAAK,SAAAjC,GAAQ,OAAIA,EAAS+D,UAC1B9B,MAAK,SAAAjC,GAEoB,MADTmD,KAAKa,MAAMhE,GACbzC,QACP0G,MAAM,yCAGbC,OAAM,SAAA9C,GACH6C,MAAM,sCACNpC,QAAQC,IAAI,QAASV,Q,oBAIjC,WAAU,IAAD,OACL,EAA8EhE,KAAK6B,MAA3EmC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAUC,EAAzB,EAAyBA,aAAcjD,EAAvC,EAAuCA,eAAgBkD,EAAvD,EAAuDA,aAAcC,EAArE,EAAqEA,KACrE,GAAIJ,EACA,OAAO,0CAAaA,EAAM+C,WACvB,IAAK9C,EACR,OAAO,6CACH,IAAD,aACH,IAAuCkB,EAAcK,EAAjDwB,EAAe,GAAIC,EAAa,EAA4BC,EAAiB,GACjF,EAAgC,EAAKjH,MAA7BY,EAAR,EAAQA,UAAWS,EAAnB,EAAmBA,SACnB,IAAKL,EAAeM,MAAK,SAAAC,GAAI,OAAIA,EAAKF,WAAaA,KAAW,CAM1D,IALA,IAAI6F,EAAc,CACd,SAAY7F,EACZ,QAAU,EACV,aAAgB,IAEXP,EAAI,EAAGA,EAAImD,EAAalD,OAAQD,IAAK,CAC1CoG,EAAYhC,aAAa3E,KAAK,CAC1B,QAAU,EACV,OAAS,EACT,UAAa,KAEjB,IAAK,IAAIa,EAAI,EAAGA,EAAI6C,EAAanD,GAAG4B,UAAU3B,OAAQK,IAClD8F,EAAYhC,aAAapE,GAAG4B,UAAUnC,KAAK,CACvC,QAAU,EACV,UAAa,GACb,QAAW,GACX,SAAY,KAKxBS,EAAeT,KAAK2G,GACpB,EAAK9E,SAAS,CACVpB,eAAgBA,IAGxBkE,EAAelE,EAAeM,MAAK,SAAAC,GAAI,OAAIA,EAAKF,WAAaA,KAAU6D,aACvEK,EAAYvE,EAAemG,WAAU,SAAA5F,GAAI,OAAIA,EAAKF,WAAaA,KAC3DL,EAAeM,MAAK,SAAAC,GAAI,OAAIA,EAAKF,WAAaA,KAAUnB,QAAUU,EAAUG,SAAYwE,EAAY,GACpG0B,EAAe1G,KACX,eAAC,IAAD,CACI+F,MAAI,EACJ7F,UAAU,cAFd,UAII,cAAC,IAAD,CAAWC,IAAI,KAAf,4BAGA,cAAC,IAAD,kHAGA,cAAC,IAAD,CAAML,GAAE,gBAAWO,EAAU2E,EAAY,GAAGjF,MAA5C,SACI,cAAC,IAAD,CAAQd,MAAM,UAAd,mCAKhB,IAlDG,iBAmDC,IAAI4H,EAAcJ,EAAa,EAC/BD,EAAaxG,KACT,eAAC,IAAD,WACI,cAAC,IAAD,CAAiB8G,SAAUD,EAA3B,SACKnD,EAAa+C,GAAYxG,OAE9B,cAAC,IAAD,CAAe8G,YAAaF,EAA5B,SACI,cAAC,EAAD,CAAajF,cAAe,kBAAM,EAAKA,cAAcoD,EAAW6B,EAAc,IAAIlF,qBAAsB,SAACO,EAAeiD,EAAkB5D,GAAlC,OAAgD,EAAKsC,iBAAiBmB,EAAW6B,EAAc,EAAG3E,EAAeiD,EAAkB5D,IAAYC,gBAAiBmD,EAAa8B,GAAapE,YAAaqB,EAAa+C,WAIxUA,KAZGA,EAAa/C,EAAalD,SAA8C,IAApCmE,EAAa8B,GAAY9G,QAAkB,IActF,GAAI8G,EAAa/C,EAAalD,OAAQ,CAClC,IAAIqG,EAAcJ,EAAa,EAAGO,EAAW,GACzCrD,IAAiBkD,GACjBG,EAAShH,KACL,cAAC,IAAD,CAAOf,MAAM,UAAb,SAAwB2E,KAEhC4C,EAAaxG,KACT,eAAC,IAAD,WACI,eAAC,IAAD,CAAiB8G,SAAUD,EAA3B,UACKnD,EAAa+C,GAAYxG,KACzB+G,KAEL,cAAC,IAAD,CAAeD,YAAaF,EAA5B,SACI,cAAC,EAAD,CAAajF,cAAe,kBAAM,EAAKA,cAAcoD,EAAW6B,EAAc,IAAIlF,qBAAsB,SAACO,EAAeiD,EAAkB5D,GAAlC,OAAgD,EAAKsC,iBAAiBmB,EAAW6B,EAAc,EAAG3E,EAAeiD,EAAkB5D,IAAYC,gBAAiBmD,EAAa8B,GAAapE,YAAaqB,EAAa+C,WAIxUA,IAEJ,IAnFG,iBAoFC,IAAII,EAAcJ,EAAa,EAC/BD,EAAaxG,KACT,eAAC,IAAD,WACI,cAAC,IAAD,CAAiB8G,SAAUD,EAA3B,SACKnD,EAAa+C,GAAYxG,OAE9B,cAAC,IAAD,UACI,cAAC,EAAD,CAAa2B,cAAe,kBAAM,EAAKA,cAAcoD,EAAW6B,EAAc,IAAIrF,gBAAiBmD,EAAa8B,GAAapE,YAAaqB,EAAa+C,WAInKA,KAZGA,EAAa/C,EAAalD,QAAS,IAc1C,MAAM,CAAN,EACI,sBAA+BN,UAAU,WAAzC,UACI,cAAC,IAAD,CAAMJ,GAAE,QAAR,SAAmB,cAAC,IAAD,CAAQb,MAAM,UAAd,4BACnB,cAAC,IAAD,CAAWgI,KAAM,EAAK5F,MAAMsC,aAAclC,OAAQ,EAAKA,OAAvD,SACK+E,IAEJE,IALK,EAAKjH,MAAMqB,WAlGtB,4C,GAxKWzB,aAsRX6H,EAxSG,SAACzH,GAIf,IAHA,IACMqB,EADSqG,cACSrG,SACpBD,EAAI,EACCN,EAAI,EAAGA,EAAId,EAAMgB,eAAeD,OAAQD,IAC7C,GAAId,EAAMgB,eAAeF,GAAGO,WAAaA,EACrC,KAAOD,EAAIpB,EAAMgB,eAAeF,GAAGoE,aAAanE,QACvCf,EAAMgB,eAAeF,GAAGoE,aAAa9D,GAAGlB,QAG7CkB,IAKZ,OADAA,IACQ,cAAC,EAAD,CAAa6D,mBAAoB7D,EAAGC,SAAUA,EAAUL,eAAgBhB,EAAMgB,eAAgBwF,SAAUxG,EAAMwG,SAAUrB,mBAAoBnF,EAAMmF,mBAAoBC,MAAOpF,EAAMoF,MAAOxE,UAAWZ,EAAMY,aCjBjN+G,G,kKACF,WACI,OAAQ,qBAAKpI,GAAG,aAAR,SACJ,sBAAKA,GAAG,eAAR,UACI,cAAC,IAAD,CAAMc,GAAE,UAAR,SAAqB,cAAC,IAAD,CAAQb,MAAM,UAAUiB,UAAU,eAAlC,uBACrB,qBAAKlB,GAAG,KAAR,gBACA,cAAC,IAAD,CAAMc,GAAE,SAAR,SAAoB,cAAC,IAAD,CAAQb,MAAM,UAAUiB,UAAU,eAAlC,8B,GANZb,cAYT+H,ICbTC,EAAsB,SAAC,GAAW,IAAVC,EAAS,EAATA,IACpBC,EAAWC,cAKjB,OAHGF,GACHC,EAAS,cAGL,8BAiIOE,E,kDA3HX,WAAYhI,GAAQ,IAAD,8BACf,cAAMA,IACD4B,MAAQ,CACTqG,OAAQ,GACRH,UAAU,GAEd,EAAKI,cAAgB,EAAKA,cAAcjG,KAAnB,gBANN,E,qDAQnB,WAAqB,IAAD,OAChByC,MAAM3E,KAAKC,MAAMmI,WAAWC,WACvBxD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,EAAK3C,SAAS,CACV6F,OAAQlD,S,2BAK5B,SAAcsD,GAAQ,IAAD,OAEjB,GADAA,EAAMC,iBACFvI,KAAK6B,MAAMqG,OAAO3G,MAAK,SAAA8D,GAAK,OAAIA,IAAU,EAAKA,MAAM7B,SACrDqD,MAAM,gDAGV,GAAI7G,KAAKwI,SAAShF,QAAUxD,KAAKyI,gBAAgBjF,MAAjD,CAIA,IAAIkF,EAAc3C,KAAKC,UAAU,CAC7B,QAAWhG,KAAKqF,MAAM7B,MACtB,KAAQxD,KAAKO,KAAKiD,MAClB,SAAYxD,KAAKwI,SAAShF,QAE9BxD,KAAK2I,kCAAkCD,QARnC7B,MAAM,4B,+CAUd,SAAkC+B,GAAa,IAAD,OACtC3C,EAAY,IAAIC,QACpBD,EAAUE,OAAO,eAAgB,oBACjC,IAAIC,EAAiB,CACjBC,OAAQ,OACRC,QAASL,EACTM,KAAMqC,EACNpC,SAAU,UAGd7B,MAAM3E,KAAKC,MAAMmI,WAAWS,WAAYzC,GACnCvB,MAAK,SAAAjC,GAAQ,OAAIA,EAAS+D,UAC1B9B,MAAK,SAAAjC,GACF,IAAIoC,EAASe,KAAKa,MAAMhE,GACE,MAAtBoC,EAAO8D,aACPjC,MAAM7B,EAAOuB,MACb,EAAKlE,SAAS,CACV0F,UAAU,QAIrBjB,OAAM,SAAA9C,GACH6C,MAAM,2BACNpC,QAAQC,IAAI,QAASV,Q,oBAIjC,WAAU,IAAD,OACL,OACI,eAAC,IAAD,CAAM+E,SAAU/I,KAAKmI,cAArB,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOa,IAAI,QAAX,mBAGA,cAAC,IAAD,CACIxJ,GAAG,cACHe,KAAK,QACLgD,YAAY,sBACZD,KAAK,QACL2F,SAAU,SAACC,GAAD,OAAW,EAAK7D,MAAQ6D,QAG1C,eAAC,IAAD,WACI,cAAC,IAAD,CAAOF,IAAI,OAAX,kBAGA,cAAC,IAAD,CACIxJ,GAAG,aACHe,KAAK,OACLgD,YAAY,kBACZD,KAAK,OACL2F,SAAU,SAACC,GAAD,OAAW,EAAK3I,KAAO2I,QAGzC,eAAC,IAAD,WACI,cAAC,IAAD,CAAOF,IAAI,WAAX,sBAGA,cAAC,IAAD,CACIxJ,GAAG,iBACHe,KAAK,WACLgD,YAAY,iBACZD,KAAK,WACL2F,SAAU,SAACC,GAAD,OAAW,EAAKV,SAAWU,QAG7C,eAAC,IAAD,WACI,cAAC,IAAD,CAAOF,IAAI,kBAAX,8BAGA,cAAC,IAAD,CACIxJ,GAAG,wBACHe,KAAK,kBACLgD,YAAY,yBACZD,KAAK,WACL2F,SAAU,SAACC,GAAD,OAAW,EAAKT,gBAAkBS,QAGpD,cAAC,IAAD,CAAQ5F,KAAK,SAAS7D,MAAM,UAA5B,oBAGA,cAAC,EAAD,CAAqBqI,IAAK9H,KAAK6B,MAAMkG,kB,GAtHhClI,aCZfsJ,EAAiB,SAAC,GAAa,IAAXrB,EAAU,EAAVA,IAChBC,EAAWC,cAKjB,OAHIF,GACAC,EAAS,SAGT,8BAkEOqB,E,kDA7DX,WAAYnJ,GAAQ,IAAD,8BACf,cAAMA,IACD4B,MAAQ,CACTkG,UAAU,GAEd,EAAKsB,MAAQ,EAAKA,MAAMnH,KAAX,gBALE,E,yCAOnB,SAAMoG,GAAQ,IAAD,OACTA,EAAMC,iBACN5D,MAAM,GAAD,OAAI3E,KAAKC,MAAMqJ,UAAUC,UAAzB,kBAA4CvJ,KAAKqF,MAAM7B,MAAvD,qBAAyExD,KAAKwI,SAAShF,QACvFqB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACOA,EAAOwE,YACP,EAAKvJ,MAAMwJ,kCAAkCzE,EAAO/D,eAAgB,EAAKoE,MAAM7B,MAAOwB,EAAOzE,MAC7F,EAAK8B,SAAS,CACV0F,UAAU,KAIlBlB,MAAM,oC,oBAKtB,WAAU,IAAD,OACL,OACI,eAAC,IAAD,CAAMkC,SAAU/I,KAAKqJ,MAArB,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOL,IAAI,QAAX,mBAGA,cAAC,IAAD,CACIxJ,GAAG,aACHe,KAAK,QACLgD,YAAY,sBACZD,KAAK,QACL2F,SAAU,SAACC,GAAD,OAAW,EAAK7D,MAAQ6D,QAG1C,eAAC,IAAD,WACI,cAAC,IAAD,CAAOF,IAAI,WAAX,sBAGA,cAAC,IAAD,CACIxJ,GAAG,gBACHe,KAAK,WACLgD,YAAY,iBACZD,KAAK,WACL2F,SAAU,SAACC,GAAD,OAAW,EAAKV,SAAWU,QAG7C,cAAC,IAAD,CAAQ5F,KAAK,SAAS7D,MAAM,UAA5B,oBAGA,cAAC,EAAD,CAAgBqI,IAAK9H,KAAK6B,MAAMkG,kB,GAxD5BlI,aCoEL6J,E,kDArEb,WAAYzJ,GAAQ,IAAD,8BACjB,cAAMA,IACD4B,MAAQ,CACX8H,UAAU,EACV1I,gBAAgB,EAChBJ,UAAU,GACVwE,MAAM,GACNuE,UAAU,GAEZ,EAAKH,kCAAoC,EAAKA,kCAAkCvH,KAAvC,gBATxB,E,qDAWnB,WAAqB,IAAD,OAClByC,MAAMC,gCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAK3C,SAAS,CACZsH,SAAU3E,OAIhBL,MAAMC,6CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,EAAK3C,SAAS,CACVxB,UAAWmE,EAAOlE,a,+CAKlC,SAAkCG,EAAgBoE,EAAOuE,GACvD5J,KAAKqC,SAAS,CACZpB,eAAgBA,EAChBoE,MAAOA,EACPuE,SAAUA,M,oBAGd,WACE,OAAI5J,KAAK6B,MAAM8H,SAET,qBAAKjJ,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmJ,OAAK,EAACC,KAAK,IAAIC,QAAS,cAAC,IAAD,CAAUzJ,GAAG,iBAC5C,cAAC,IAAD,CAAOuJ,OAAK,EAACC,KAAK,aAAaC,QAAS,cAAC,EAAD,MACxC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,UAAUC,QAAS,cAAC,EAAD,CAAQ3B,WAAYpI,KAAK6B,MAAM8H,SAASK,KAAKC,WAClF,cAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,SAASC,QAAS,cAAC,EAAD,CAAOT,UAAWtJ,KAAK6B,MAAM8H,SAASK,KAAKX,MAAOI,kCAAmCzJ,KAAKyJ,sCAC9H,cAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,QAAQC,QAAS,cAAC,EAAD,CAAM9I,eAAgBjB,KAAK6B,MAAMZ,eAAgBJ,UAAWb,KAAK6B,MAAMhB,cAC1G,cAAC,IAAD,CAAOgJ,OAAK,EAACC,KAAK,kBAAkBC,QAAS,cAAC,EAAD,CAAW9I,eAAgBjB,KAAK6B,MAAMZ,eAAgBwF,SAAUzG,KAAK6B,MAAM8H,SAASK,KAAKE,KAAM9E,mBAAoBpF,KAAK6B,MAAM8H,SAASK,KAAKG,eAAgB9E,MAAOrF,KAAK6B,MAAMwD,MAAOxE,UAAWb,KAAK6B,MAAMhB,sBAO9P,sBAAKH,UAAU,MAAf,UACE,cAAC,EAAD,IACA,qBAAKlB,GAAG,aAAR,SACE,cAAC,IAAD,CAASA,GAAG,aAAZ,iC,GA7DIK,aCDHuK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzF,MAAK,YAAkD,IAA/C0F,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.65a7fa8f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Navbar, NavbarBrand } from \"reactstrap\";\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"navbar\">\r\n                <Navbar\r\n                    color=\"dark\"\r\n                    dark\r\n                    fixed=\"top\"\r\n                >\r\n                    <NavbarBrand href=\"/\">\r\n                        Tech-Bridge\r\n                    </NavbarBrand>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport \"./zone.css\";\r\nimport { Button, Card, CardBody, CardTitle, CardText } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Zone extends Component {\r\n    render() {\r\n        const { zoneData, status } = this.props;\r\n        let button, zoneDesc=[];\r\n        if (status === \"locked\")\r\n            button = <Button color=\"danger\" disabled>Locked</Button>;\r\n        if (status === \"completed\")\r\n            button = <Link to={`/zone/${zoneData.name}`}><Button color=\"success\">Completed</Button></Link>;\r\n        if (status === \"start\")\r\n            button = <Link to={`/zone/${zoneData.name}`}><Button color=\"primary\">Start</Button></Link>;\r\n        if (status === \"inprogress\")\r\n            button = <Link to={`/zone/${zoneData.name}`}><Button color=\"warning\">Resume</Button></Link>;\r\n        if(status === \"start\" || status === \"inprogress\"){\r\n            zoneDesc.push(<CardText>{zoneData.desc}</CardText>);\r\n        }\r\n        return (\r\n            <Card className=\"zone\">\r\n                <CardBody className={status}>\r\n                    <CardTitle tag=\"h5\">{zoneData.name}</CardTitle>\r\n                    {/* <CardSubtitle\r\n                        className=\"mb-2 text-muted\"\r\n                        tag=\"h6\"\r\n                    >\r\n                        Card subtitle\r\n                    </CardSubtitle> */}\r\n                    {zoneDesc}\r\n                    {button}\r\n                </CardBody>\r\n            </Card>)\r\n    }\r\n}\r\n\r\nexport default Zone;","import React, { Component } from \"react\";\r\nimport Zone from \"./zone/zone\";\r\n\r\nclass Main extends Component {\r\n    render() {\r\n        const { zonesJson } = this.props;\r\n        let zones = [];\r\n        for (let i = 0; i < zonesJson.length; i++) {\r\n            zones.push(zonesJson[i].name);\r\n        }\r\n        const { lessonProgress } = this.props;\r\n        let zonesHtml = [], i = 0, userZones = [], resumeZone = false;\r\n        for (let j = 0; j < lessonProgress.length; j++) {\r\n            if (lessonProgress[j].status)\r\n                userZones.push(lessonProgress[j].zoneName)\r\n            else {\r\n                resumeZone = true;\r\n            }\r\n        }\r\n        while (i < zones.length) {\r\n            if (userZones.find(zone => zone === zones[i])) {\r\n                zonesHtml.push(<Zone zoneData={zonesJson[i]} status=\"completed\" />)\r\n                i++;\r\n            }\r\n            else\r\n                break;\r\n        }\r\n        if (resumeZone)\r\n            zonesHtml.push(<Zone zoneData={zonesJson[i]} status=\"inprogress\" />)\r\n        else if (i < zones.length)\r\n            zonesHtml.push(<Zone zoneData={zonesJson[i]} status=\"start\" />)\r\n        i++;\r\n        while (i < zones.length) {\r\n            zonesHtml.push(<Zone zoneData={zonesJson[i]} status=\"locked\" />);\r\n            i++;\r\n        }\r\n        return (\r\n            <div className=\"zones\">{zonesHtml}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React, { Component } from \"react\";\r\n\r\nimport { Button, Card, CardBody, CardHeader, CardTitle, Collapse, Input } from \"reactstrap\";\r\n\r\nclass VideoButton extends Component {\r\n    render() {\r\n        if (this.props.status)\r\n            return (<Button className=\"instructionFunction\" color=\"success\" onClick={this.props.onClick}>Watch Again</Button>);\r\n        else\r\n            return (<Button className=\"instructionFunction\" color=\"primary\" onClick={this.props.onClick}>Play</Button>)\r\n    }\r\n}\r\n\r\nclass ExerciseButton extends Component {\r\n    render() {\r\n        if (this.props.status === \"completed\")\r\n            return (<Button className=\"instructionFunction\" color=\"success\" onClick={this.props.onClick}>Completed</Button>);\r\n        else if (this.props.status === \"start\")\r\n            return (<Button className=\"instructionFunction\" color=\"primary\" onClick={this.props.onClick}>Start</Button>);\r\n        else if (this.props.status === \"locked\")\r\n            return (<Button className=\"instructionFunction\" color=\"danger\" onClick={this.props.onClick} disabled>Locked</Button>);\r\n        else\r\n            return (<></>);\r\n    }\r\n}\r\n\r\nclass ZoneSection extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            openId: 0,\r\n            startTime: \"\",\r\n            sectionProgress: this.props.sectionProgress\r\n        }\r\n        this.toggle = this.toggle.bind(this);\r\n        this.sendExerciseResponse = this.sendExerciseResponse.bind(this);\r\n        this.completeVideo = this.completeVideo.bind(this);\r\n    }\r\n\r\n    toggle(openId) {\r\n        if (this.state.openId === openId)\r\n            this.setState({\r\n                openId: 0\r\n            });\r\n        else\r\n            this.setState({\r\n                openId: openId,\r\n                startTime: Math.round(new Date().getTime()/1000)\r\n            });\r\n    }\r\n\r\n    sendExerciseResponse(exerciseIndex){\r\n        this.props.sendExerciseResponse(exerciseIndex, this.state.sectionProgress.exercises[exerciseIndex].response, this.state.startTime);\r\n        this.setState({\r\n            openId: 0\r\n        })\r\n    }\r\n\r\n    completeVideo(){\r\n        this.props.completeVideo();\r\n        this.setState({\r\n            openId: 0\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { sectionData } = this.props;\r\n        const exerciseData = sectionData.exercises, exerciseHtml = [], completeVideoButtton = [];\r\n        let exercisesIndex = 0;\r\n        if (!this.state.sectionProgress.video)\r\n            completeVideoButtton.push(<Button color=\"primary\" onClick={() => this.completeVideo()}>Mark Video as complete</Button>)\r\n        else {\r\n            while (exercisesIndex < exerciseData.length && this.state.sectionProgress.exercises[exercisesIndex].status) {\r\n                let toggleIndex = exercisesIndex + 2;\r\n                exerciseHtml.push(\r\n                    <Card>\r\n                        <CardHeader className=\"instructionHeader\">\r\n                            <CardTitle className=\"instruction\">{exerciseData[exercisesIndex].code}</CardTitle>\r\n                            <ExerciseButton status=\"completed\" onClick={() => this.toggle(toggleIndex)} />\r\n                        </CardHeader>\r\n                        <Collapse isOpen={this.state.openId === (toggleIndex)}>\r\n                            <CardBody>\r\n                                {exerciseData[exercisesIndex].desc}\r\n                                <Input\r\n                                    type=\"textarea\"\r\n                                    placeholder=\"Enter your response\" \r\n                                    value={this.state.sectionProgress.exercises[exercisesIndex].response}\r\n                                    onChange={(e) => {\r\n                                        let sectionProgress = this.state.sectionProgress;\r\n                                        sectionProgress.exercises[toggleIndex-2].response = e.target.value\r\n                                        this.setState({\r\n                                            sectionProgress : sectionProgress\r\n                                        })\r\n                                    }} \r\n                                />\r\n                                <Button color=\"primary\" onClick={() => this.sendExerciseResponse(toggleIndex-2)} >Submit</Button>\r\n                            </CardBody>\r\n                        </Collapse>\r\n                    </Card>\r\n                )\r\n                exercisesIndex++;\r\n            }\r\n            if (exercisesIndex < exerciseData.length) {\r\n                let toggleIndex = exercisesIndex + 2;\r\n                exerciseHtml.push(\r\n                    <Card>\r\n                        <CardHeader className=\"instructionHeader\">\r\n                            <CardTitle className=\"instruction\">{exerciseData[exercisesIndex].code}</CardTitle>\r\n                            <ExerciseButton status=\"start\" onClick={() => this.toggle(toggleIndex)} />\r\n                        </CardHeader>\r\n                        <Collapse isOpen={this.state.openId === (toggleIndex)}>\r\n                            <CardBody>\r\n                                {exerciseData[exercisesIndex].desc}\r\n                                <Input\r\n                                    type=\"textarea\"\r\n                                    placeholder=\"Enter your response\" \r\n                                    value={this.state.sectionProgress.exercises[exercisesIndex].response}\r\n                                    onChange={(e) => {\r\n                                        let sectionProgress = this.state.sectionProgress;\r\n                                        sectionProgress.exercises[toggleIndex-2].response = e.target.value\r\n                                        this.setState({\r\n                                            sectionProgress : sectionProgress\r\n                                        })\r\n                                    }} \r\n                                />\r\n                                <Button color=\"primary\" onClick={() => this.sendExerciseResponse(toggleIndex-2)} >Submit</Button>\r\n                            </CardBody>\r\n                        </Collapse>\r\n                    </Card>\r\n                )\r\n                exercisesIndex++;\r\n            }\r\n        }\r\n        while (exercisesIndex < exerciseData.length) {\r\n            let toggleIndex = exercisesIndex + 2;\r\n            exerciseHtml.push(\r\n                <Card>\r\n                    <CardHeader className=\"instructionHeader\">\r\n                        <CardTitle className=\"instruction\">{exerciseData[exercisesIndex].code}</CardTitle>\r\n                        <ExerciseButton status=\"locked\" onClick={() => this.toggle(toggleIndex)} />\r\n                    </CardHeader>\r\n                    <Collapse isOpen={this.state.openId === (toggleIndex)}>\r\n                        <CardBody>\r\n                            {exerciseData[exercisesIndex].desc}\r\n                            <Input type=\"textarea\" placeholder=\"Enter your response\" />\r\n                            <Button color=\"primary\">Submit</Button>\r\n                        </CardBody>\r\n                    </Collapse>\r\n                </Card>\r\n            )\r\n            exercisesIndex++;\r\n        }\r\n        return (<div>\r\n            <Card>\r\n                <CardHeader className=\"instructionHeader\">\r\n                    <CardTitle className=\"instruction\">Play Course Video</CardTitle>\r\n                    <VideoButton status={this.state.sectionProgress.video} onClick={() => this.toggle(1)} />\r\n                </CardHeader>\r\n                <Collapse isOpen={this.state.openId === 1}>\r\n                    <CardBody>\r\n                        <video width=\"400\" controls>\r\n                            <source src={sectionData.video} type=\"video/mp4\" />\r\n                            Your browser doesn't support HTML video\r\n                        </video>\r\n                        {completeVideoButtton}\r\n                    </CardBody>\r\n                </Collapse>\r\n            </Card>\r\n            {exerciseHtml}\r\n        </div>)\r\n    }\r\n}\r\n\r\n\r\nexport default ZoneSection;","import React, { Component } from \"react\";\r\nimport \"./zone-content.css\"\r\n\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Accordion, AccordionItem, AccordionHeader, AccordionBody, Card, CardTitle, CardText, Button, Badge } from \"reactstrap\";\r\nimport ZoneSection from \"./zone-section/zone-section\";\r\n\r\nconst ZoneRoute = (props) => {\r\n    const params = useParams();\r\n    const zoneName = params.zoneName;\r\n    let j = 0;\r\n    for (let i = 0; i < props.lessonProgress.length; i++) {\r\n        if (props.lessonProgress[i].zoneName === zoneName) {\r\n            while (j < props.lessonProgress[i].zoneProgress.length) {\r\n                if (!props.lessonProgress[i].zoneProgress[j].status) {\r\n                    break;\r\n                }\r\n                j++;\r\n            }\r\n        }\r\n    }\r\n    j++;\r\n    return (<ZoneContent activeSectionIndex={j} zoneName={zoneName} lessonProgress={props.lessonProgress} mainApis={props.mainApis} roomManagementApis={props.roomManagementApis} email={props.email} zonesJson={props.zonesJson} />)\r\n}\r\n\r\nclass ZoneContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            sectionsJson: [],\r\n            activeCardNo: 0,\r\n            lessonProgress: this.props.lessonProgress,\r\n            zoneName: this.props.zoneName,\r\n            room: \"\"\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n        this.completeVideo = this.completeVideo.bind(this);\r\n        this.completeExercise = this.completeExercise.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchSectionsJson();\r\n        this.getRoomNo();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.zoneName !== this.props.zoneName) {\r\n            this.fetchSectionsJson();\r\n            this.getRoomNo();\r\n            console.log(\"room updated\")\r\n        }\r\n    }\r\n\r\n    fetchSectionsJson() {\r\n        fetch(process.env.PUBLIC_URL + \"/data/foundation/\" + this.state.zoneName + \".json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        sectionsJson: result.sections,\r\n                        activeCardNo: this.props.activeSectionIndex\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    getRoomNo() {\r\n        let zone = this.state.lessonProgress.find(zone => zone.zoneName === this.props.zoneName);\r\n        console.log(zone);\r\n        if (zone) {\r\n            if (!zone.status) {\r\n                for (let i = 0; i < zone.zoneProgress.length; i++) {\r\n                    if (!zone.zoneProgress[i].status) {\r\n                        fetch(this.props.roomManagementApis.getRoomNo + \"?email=\" + this.props.email + \"&roadmap=foundation&zone=\" + this.state.zoneName + \"&section=Section\" + (i + 1))\r\n                            .then(res => res.json())\r\n                            .then(\r\n                                (result) => {\r\n                                    this.setState({\r\n                                        room: result.roomsName\r\n                                    });\r\n                                },\r\n                                (error) => {\r\n                                    console.error(error);\r\n                                }\r\n                            )\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            fetch(this.props.roomManagementApis.getRoomNo + \"?email=\" + this.props.email + \"&roadmap=foundation&zone=\" + this.state.zoneName + \"&section=Section1\")\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        this.setState({\r\n                            room: result.roomsName\r\n                        });\r\n                    },\r\n                    (error) => {\r\n                        console.error(error);\r\n                    }\r\n                )\r\n        }\r\n    }\r\n\r\n    toggle(cardToggleNo) {\r\n        if (cardToggleNo === this.state.activeCardNo)\r\n            this.setState({\r\n                activeCardNo: 0\r\n            })\r\n        else\r\n            this.setState({\r\n                activeCardNo: cardToggleNo\r\n            })\r\n    }\r\n\r\n    completeVideo(zoneIndex, sectionIndex) {\r\n        let lessonProgress = this.state.lessonProgress;\r\n        lessonProgress[zoneIndex].zoneProgress[sectionIndex].video = true;\r\n        this.updateLessonProgress(lessonProgress);\r\n        this.setState({\r\n            lessonProgress: lessonProgress\r\n        })\r\n    }\r\n\r\n    completeExercise(zoneIndex, sectionIndex, exerciseIndex, exerciseResponse, startTime) {\r\n        let lessonProgress = this.state.lessonProgress, activeCardNo = this.state.activeCardNo, updateRoom=false;\r\n        lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises[exerciseIndex].response = exerciseResponse;\r\n        lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises[exerciseIndex].startTime = startTime;\r\n        lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises[exerciseIndex].endTime = Math.round(new Date().getTime() / 1000);\r\n        lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises[exerciseIndex].status = true;\r\n        if (lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises.length === (exerciseIndex + 1)) {\r\n            lessonProgress[zoneIndex].zoneProgress[sectionIndex].status = true;\r\n            if (lessonProgress[zoneIndex].zoneProgress.length === (sectionIndex + 1))\r\n                lessonProgress[zoneIndex].status = true\r\n            else\r\n            updateRoom=true;\r\n        }\r\n        this.updateLessonProgress(lessonProgress);\r\n        if (this.state.sectionsJson[sectionIndex].exercises.length === (exerciseIndex + 1)) {\r\n            activeCardNo++;\r\n        }\r\n        this.setState({\r\n            lessonProgress: lessonProgress,\r\n            activeCardNo: activeCardNo\r\n        })\r\n        if(updateRoom)\r\n        this.getRoomNo();\r\n    }\r\n\r\n    updateLessonProgress(lessonProgress) {\r\n        var lessonProgressDetails = JSON.stringify({\r\n            \"email\": this.props.email,\r\n            \"lessonProgress\": lessonProgress\r\n        });\r\n        let myHeaders = new Headers();\r\n        myHeaders.append(\"Content-Type\", \"application/json\");\r\n        let requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: lessonProgressDetails,\r\n            redirect: 'follow'\r\n        };\r\n        fetch(this.props.mainApis.updateLesson, requestOptions)\r\n            .then(response => response.text())\r\n            .then(response => {\r\n                let result = JSON.parse(response);\r\n                if (result.status !== 200) {\r\n                    alert(\"Couldn't update progress to server\");\r\n                }\r\n            })\r\n            .catch(error => {\r\n                alert(\"Couldn't update progress to server\");\r\n                console.log('error', error)\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, sectionsJson, lessonProgress, activeCardNo, room } = this.state;\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            let sectionsHtml = [], sectionPos = 0, zoneProgress, zoneIndex, moveToNextZone = [];\r\n            const { zonesJson, zoneName } = this.props;\r\n            if (!lessonProgress.find(zone => zone.zoneName === zoneName)) {\r\n                let newZoneJson = {\r\n                    \"zoneName\": zoneName,\r\n                    \"status\": false,\r\n                    \"zoneProgress\": []\r\n                }\r\n                for (let i = 0; i < sectionsJson.length; i++) {\r\n                    newZoneJson.zoneProgress.push({\r\n                        \"status\": false,\r\n                        \"video\": false,\r\n                        \"exercises\": []\r\n                    })\r\n                    for (let j = 0; j < sectionsJson[i].exercises.length; j++) {\r\n                        newZoneJson.zoneProgress[i].exercises.push({\r\n                            \"status\": false,\r\n                            \"startTime\": \"\",\r\n                            \"endTime\": \"\",\r\n                            \"response\": \"\"\r\n                        })\r\n\r\n                    }\r\n                }\r\n                lessonProgress.push(newZoneJson);\r\n                this.setState({\r\n                    lessonProgress: lessonProgress\r\n                })\r\n            }\r\n            zoneProgress = lessonProgress.find(zone => zone.zoneName === zoneName).zoneProgress;\r\n            zoneIndex = lessonProgress.findIndex(zone => zone.zoneName === zoneName);\r\n            if (lessonProgress.find(zone => zone.zoneName === zoneName).status && zonesJson.length !== (zoneIndex + 1)) {\r\n                moveToNextZone.push(\r\n                    <Card\r\n                        body\r\n                        className=\"text-center\"\r\n                    >\r\n                        <CardTitle tag=\"h5\">\r\n                            Zone Completed\r\n                        </CardTitle>\r\n                        <CardText>\r\n                            Congratulations on completing this zone, you can move to next zone by clicking on the button below.\r\n                        </CardText>\r\n                        <Link to={`/zone/${zonesJson[zoneIndex + 1].name}`}>\r\n                            <Button color=\"primary\">Go to Next Zone</Button>\r\n                        </Link>\r\n                    </Card>\r\n                )\r\n            }\r\n            while (sectionPos < sectionsJson.length && zoneProgress[sectionPos].status === true) {\r\n                let toggleValue = sectionPos + 1;\r\n                sectionsHtml.push(\r\n                    <AccordionItem>\r\n                        <AccordionHeader targetId={toggleValue}>\r\n                            {sectionsJson[sectionPos].desc}\r\n                        </AccordionHeader>\r\n                        <AccordionBody accordionId={toggleValue}>\r\n                            <ZoneSection completeVideo={() => this.completeVideo(zoneIndex, toggleValue - 1)} sendExerciseResponse={(exerciseIndex, exerciseResponse, startTime) => this.completeExercise(zoneIndex, toggleValue - 1, exerciseIndex, exerciseResponse, startTime)} sectionProgress={zoneProgress[sectionPos]} sectionData={sectionsJson[sectionPos]} />\r\n                        </AccordionBody>\r\n                    </AccordionItem>\r\n                );\r\n                sectionPos++;\r\n            }\r\n            if (sectionPos < sectionsJson.length) {\r\n                let toggleValue = sectionPos + 1, roomInfo = [];\r\n                if (activeCardNo === toggleValue)\r\n                    roomInfo.push(\r\n                        <Badge color=\"primary\">{room}</Badge>\r\n                    )\r\n                sectionsHtml.push(\r\n                    <AccordionItem>\r\n                        <AccordionHeader targetId={toggleValue}>\r\n                            {sectionsJson[sectionPos].desc}\r\n                            {roomInfo}\r\n                        </AccordionHeader>\r\n                        <AccordionBody accordionId={toggleValue}>\r\n                            <ZoneSection completeVideo={() => this.completeVideo(zoneIndex, toggleValue - 1)} sendExerciseResponse={(exerciseIndex, exerciseResponse, startTime) => this.completeExercise(zoneIndex, toggleValue - 1, exerciseIndex, exerciseResponse, startTime)} sectionProgress={zoneProgress[sectionPos]} sectionData={sectionsJson[sectionPos]} />\r\n                        </AccordionBody>\r\n                    </AccordionItem>\r\n                );\r\n                sectionPos++;\r\n            }\r\n            while (sectionPos < sectionsJson.length) {\r\n                let toggleValue = sectionPos + 1;\r\n                sectionsHtml.push(\r\n                    <AccordionItem>\r\n                        <AccordionHeader targetId={toggleValue}>\r\n                            {sectionsJson[sectionPos].desc}\r\n                        </AccordionHeader>\r\n                        <AccordionBody>\r\n                            <ZoneSection completeVideo={() => this.completeVideo(zoneIndex, toggleValue - 1)} sectionProgress={zoneProgress[sectionPos]} sectionData={sectionsJson[sectionPos]} />\r\n                        </AccordionBody>\r\n                    </AccordionItem>\r\n                );\r\n                sectionPos++;\r\n            }\r\n            return (\r\n                <div key={this.props.zoneName} className=\"sections\">\r\n                    <Link to={`/home`}><Button color=\"primary\">Back to Home</Button></Link>\r\n                    <Accordion open={this.state.activeCardNo} toggle={this.toggle}>\r\n                        {sectionsHtml}\r\n                    </Accordion>\r\n                    {moveToNextZone}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default ZoneRoute;","import React, { Component } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './start-page.css';\r\n\r\nclass StartPage extends Component {\r\n    render() {\r\n        return (<div id='start_page'>\r\n            <div id='loginOptions'>\r\n                <Link to={`/signup`}><Button color=\"primary\" className='loginButtons'>Sign Up</Button></Link>\r\n                <div id='or'>OR</div>\r\n                <Link to={`/login`}><Button color=\"primary\" className='loginButtons'>Login</Button></Link>\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default StartPage;","import React, { Component } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\r\n\r\nconst NavigateToStartPage = ({nav}) => {\r\n    const navigate = useNavigate();\r\n\r\n    if(nav)\r\n    navigate('/startpage');\r\n\r\n    return (\r\n        <></>\r\n    );\r\n}\r\n\r\n\r\nclass SignUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            emails: [],\r\n            navigate: false\r\n        }\r\n        this.signUpAccount = this.signUpAccount.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        fetch(this.props.signUpApis.getEmails)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        emails: result\r\n                    });\r\n                }\r\n            )\r\n    }\r\n    signUpAccount(event) {\r\n        event.preventDefault();\r\n        if (this.state.emails.find(email => email === this.email.value)) {\r\n            alert(\"Account with this email altready exists\");\r\n            return;\r\n        }\r\n        if (this.password.value !== this.confirmPassword.value) {\r\n            alert(\"Passwords didn't match\");\r\n            return;\r\n        }\r\n        var newUserData = JSON.stringify({\r\n            \"emailId\": this.email.value,\r\n            \"name\": this.name.value,\r\n            \"password\": this.password.value\r\n        });\r\n        this.sendSignUpToServerAndReportToUser(newUserData);\r\n    }\r\n    sendSignUpToServerAndReportToUser(dataToSend) {\r\n        let myHeaders = new Headers();\r\n        myHeaders.append(\"Content-Type\", \"application/json\");\r\n        let requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: dataToSend,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        fetch(this.props.signUpApis.createUser, requestOptions)\r\n            .then(response => response.text())\r\n            .then(response => {\r\n                let result = JSON.parse(response);\r\n                if (result.statusCode === 200) {\r\n                    alert(result.body);\r\n                    this.setState({\r\n                        navigate: true\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                alert(\"Account Creation Failed\");\r\n                console.log('error', error)\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.signUpAccount}>\r\n                <FormGroup>\r\n                    <Label for=\"email\">\r\n                        Email\r\n                    </Label>\r\n                    <Input\r\n                        id=\"signupEmail\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter your email ID\"\r\n                        type=\"email\"\r\n                        innerRef={(input) => this.email = input}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"name\">\r\n                        Name\r\n                    </Label>\r\n                    <Input\r\n                        id=\"signupName\"\r\n                        name=\"name\"\r\n                        placeholder=\"Enter your Name\"\r\n                        type=\"text\"\r\n                        innerRef={(input) => this.name = input}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"password\">\r\n                        Password\r\n                    </Label>\r\n                    <Input\r\n                        id=\"signupPassword\"\r\n                        name=\"password\"\r\n                        placeholder=\"Enter password\"\r\n                        type=\"password\"\r\n                        innerRef={(input) => this.password = input}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"confirmPassword\">\r\n                        Confirm Password\r\n                    </Label>\r\n                    <Input\r\n                        id=\"signupConfirmPassword\"\r\n                        name=\"confirmPassword\"\r\n                        placeholder=\"Re-Enter your password\"\r\n                        type=\"password\"\r\n                        innerRef={(input) => this.confirmPassword = input}\r\n                    />\r\n                </FormGroup>\r\n                <Button type=\"submit\" color=\"primary\">\r\n                    Submit\r\n                </Button>\r\n                <NavigateToStartPage nav={this.state.navigate} />\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SignUp;","import React, { Component } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\r\n\r\nconst NavigateToHome = ({ nav }) => {\r\n    const navigate = useNavigate();\r\n\r\n    if (nav)\r\n        navigate('/home');\r\n\r\n    return (\r\n        <></>\r\n    );\r\n}\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            navigate: false\r\n        }\r\n        this.login = this.login.bind(this);\r\n    }\r\n    login(event) {\r\n        event.preventDefault();\r\n        fetch(`${this.props.loginApis.loginUser}?email=${this.email.value}&password=${this.password.value}`)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    if (result.authorized) {\r\n                        this.props.getLessonProgressEmailAndUserName(result.lessonProgress, this.email.value, result.name);\r\n                        this.setState({\r\n                            navigate: true\r\n                        })\r\n                    }\r\n                    else\r\n                    alert(\"Incorrect email or password\");\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.login}>\r\n                <FormGroup>\r\n                    <Label for=\"email\">\r\n                        Email\r\n                    </Label>\r\n                    <Input\r\n                        id=\"loginEmail\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter your email ID\"\r\n                        type=\"email\"\r\n                        innerRef={(input) => this.email = input}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"password\">\r\n                        Password\r\n                    </Label>\r\n                    <Input\r\n                        id=\"loginPassword\"\r\n                        name=\"password\"\r\n                        placeholder=\"Enter password\"\r\n                        type=\"password\"\r\n                        innerRef={(input) => this.password = input}\r\n                    />\r\n                </FormGroup>\r\n                <Button type=\"submit\" color=\"primary\">\r\n                    Submit\r\n                </Button>\r\n                <NavigateToHome nav={this.state.navigate} />\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Spinner } from 'reactstrap';\r\nimport { HashRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\r\n\r\nimport Header from './components/header/header';\r\nimport Main from './components/main/main';\r\nimport ZoneRoute from './components/zone-content/zone-content'\r\nimport StartPage from './components/start-page/start-page';\r\nimport SignUp from './components/signup/signup';\r\nimport Login from './components/login/login';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      baseFile: false,\r\n      lessonProgress: false,\r\n      zonesJson:[],\r\n      email:\"\",\r\n      userName: false\r\n    }\r\n    this.getLessonProgressEmailAndUserName = this.getLessonProgressEmailAndUserName.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    fetch(process.env.PUBLIC_URL + \"/data/index.json\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            baseFile: result\r\n          });\r\n        }\r\n      )\r\n      fetch(process.env.PUBLIC_URL + \"/data/roadmap_foundation.json\")\r\n      .then(res => res.json())\r\n      .then(\r\n          (result) => {\r\n              this.setState({\r\n                  zonesJson: result.zones\r\n              });\r\n          }\r\n      )\r\n  }\r\n  getLessonProgressEmailAndUserName(lessonProgress, email, userName) {\r\n    this.setState({\r\n      lessonProgress: lessonProgress,\r\n      email: email,\r\n      userName: userName\r\n    });\r\n  }\r\n  render() {\r\n    if (this.state.baseFile)\r\n    return (\r\n          <div className=\"App\">\r\n            <Router>\r\n              <Header />\r\n              <Routes>\r\n                <Route exact path=\"/\" element={<Navigate to=\"/startpage\" />} />\r\n                <Route exact path=\"/startpage\" element={<StartPage />} />\r\n                <Route exact path=\"/signup\" element={<SignUp signUpApis={this.state.baseFile.apis.signUp} />} />\r\n                <Route exact path=\"/login\" element={<Login loginApis={this.state.baseFile.apis.login} getLessonProgressEmailAndUserName={this.getLessonProgressEmailAndUserName} />} />\r\n                <Route exact path=\"/home\" element={<Main lessonProgress={this.state.lessonProgress} zonesJson={this.state.zonesJson} />} />\r\n                <Route exact path=\"/zone/:zoneName\" element={<ZoneRoute lessonProgress={this.state.lessonProgress} mainApis={this.state.baseFile.apis.main} roomManagementApis={this.state.baseFile.apis.roomManagement} email={this.state.email} zonesJson={this.state.zonesJson} />} />\r\n              </Routes>\r\n            </Router>\r\n          </div>\r\n        );\r\n      else\r\n        return (\r\n          <div className=\"App\">\r\n            <Header />\r\n            <div id=\"loadingApp\">\r\n              <Spinner id='appSpinner'>\r\n                Loading...\r\n              </Spinner>\r\n            </div>\r\n          </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}