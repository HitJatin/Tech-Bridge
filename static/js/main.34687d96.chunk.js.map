{"version":3,"sources":["components/header/header.js","components/main/zone/zone.js","components/main/main.js","components/zone-content/zone-section/zone-section.js","components/zone-content/zone-content.js","components/start-page/start-page.js","components/signup/signup.js","components/login/login.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","state","navMenuOpen","navigate","logoutModal","toggle","bind","logout","closeModal","this","setState","logoutData","JSON","stringify","email","myHeaders","Headers","append","requestOptions","method","headers","body","redirect","fetch","logoutApi","then","response","text","catch","error","console","userToggle","userName","push","isOpen","caret","onClick","id","color","href","dark","fixed","Component","Zone","button","zoneData","status","zoneDesc","disabled","to","name","desc","className","tag","Main","zonesJson","zones","i","length","lessonProgress","zonesHtml","userZones","resumeZone","j","zoneName","find","zone","VideoButton","ExerciseButton","ZoneSection","openId","startTime","sectionProgress","sendExerciseResponse","completeVideo","Math","round","Date","getTime","exerciseIndex","exercises","sectionData","exerciseData","exerciseHtml","completeVideoButtton","exercisesIndex","video","toggleIndex","code","type","placeholder","value","onChange","e","target","width","controls","src","ZoneContent","isLoaded","sectionsJson","activeCardNo","room","completeExercise","fetchSectionsJson","getRoomNo","prevProps","log","process","res","json","result","sections","activeSectionIndex","zoneProgress","roomManagementApis","roomsName","cardToggleNo","zoneIndex","sectionIndex","updateLessonProgress","exerciseResponse","updateRoom","endTime","exerciseUpdate","lessonProgressDetails","mainApis","updateLesson","parse","alert","message","sectionsHtml","sectionPos","moveToNextZone","newZoneJson","findIndex","toggleValue","targetId","accordionId","roomInfo","open","ZoneRoute","useParams","StartPage","NavigateToStartPage","nav","useNavigate","SignUp","emails","signUpAccount","signUpApis","getEmails","event","preventDefault","password","confirmPassword","newUserData","sendSignUpToServerAndReportToUser","dataToSend","createUser","statusCode","onSubmit","for","innerRef","input","NavigateToHome","Login","login","loginApis","loginUser","authorized","getLessonProgressEmailAndUserName","App","baseFile","apis","exact","path","element","signUp","main","roomManagement","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34687d96.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Navbar, NavbarBrand, NavbarText, Modal, ModalHeader, ModalBody, ModalFooter, Button } from \"reactstrap\";\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            navMenuOpen: false,\r\n            navigate: false,\r\n            logoutModal: false\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n    }\r\n    toggle() {\r\n        this.setState({\r\n            navMenuOpen: !this.state.navMenuOpen\r\n        });\r\n    }\r\n    logout() {\r\n        let logoutData = JSON.stringify({\r\n            \"email\": this.props.email\r\n        });\r\n        let myHeaders = new Headers();\r\n        myHeaders.append(\"Content-Type\", \"application/json\");\r\n        let requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: logoutData,\r\n            redirect: 'follow'\r\n        };\r\n        fetch(this.props.logoutApi, requestOptions)\r\n            .then(response => response.text())\r\n            .then(response => {\r\n                this.props.logout();\r\n                this.setState({\r\n                    logoutModal: true\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.error(error)\r\n            });\r\n    }\r\n    closeModal() {\r\n        this.setState({\r\n            logoutModal: false\r\n        })\r\n    }\r\n    render() {\r\n        let userToggle = [];\r\n        if (this.props.userName) {\r\n            userToggle.push(\r\n                <NavbarText>\r\n                    <Dropdown toggle={this.toggle} isOpen={this.state.navMenuOpen}>\r\n                        <DropdownToggle caret>\r\n                            {this.props.userName}\r\n                        </DropdownToggle>\r\n                        <DropdownMenu>\r\n                            <DropdownItem onClick={this.logout}>Logout</DropdownItem>\r\n                        </DropdownMenu>\r\n                    </Dropdown>\r\n                </NavbarText>\r\n            )\r\n        }\r\n        return (\r\n            <div id=\"navbar\">\r\n                <Modal\r\n                    isOpen={this.state.logoutModal}\r\n                >\r\n                    <ModalHeader>Successfully Logged Out</ModalHeader>\r\n                    <ModalBody>\r\n                        You can go to start page to login again\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" href=\"/\" onClick={this.closeModal}>Start Page</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n                <Navbar\r\n                    color=\"dark\"\r\n                    dark\r\n                    fixed=\"top\"\r\n                >\r\n                    <NavbarBrand href=\"/\">\r\n                        Tech-Bridge\r\n                    </NavbarBrand>\r\n                    {userToggle}\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport \"./zone.css\";\r\nimport { Button, Card, CardBody, CardTitle, CardText } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Zone extends Component {\r\n    render() {\r\n        const { zoneData, status } = this.props;\r\n        let button, zoneDesc=[];\r\n        if (status === \"locked\")\r\n            button = <Button color=\"danger\" disabled>Locked</Button>;\r\n        if (status === \"completed\")\r\n            button = <Link to={`/zone/${zoneData.name}`}><Button color=\"success\">Completed</Button></Link>;\r\n        if (status === \"start\")\r\n            button = <Link to={`/zone/${zoneData.name}`}><Button color=\"primary\">Start</Button></Link>;\r\n        if (status === \"inprogress\")\r\n            button = <Link to={`/zone/${zoneData.name}`}><Button color=\"warning\">Resume</Button></Link>;\r\n        if(status === \"start\" || status === \"inprogress\"){\r\n            zoneDesc.push(<CardText>{zoneData.desc}</CardText>);\r\n        }\r\n        return (\r\n            <Card className=\"zone\">\r\n                <CardBody className={status}>\r\n                    <CardTitle tag=\"h5\">{zoneData.name}</CardTitle>\r\n                    {/* <CardSubtitle\r\n                        className=\"mb-2 text-muted\"\r\n                        tag=\"h6\"\r\n                    >\r\n                        Card subtitle\r\n                    </CardSubtitle> */}\r\n                    {zoneDesc}\r\n                    {button}\r\n                </CardBody>\r\n            </Card>)\r\n    }\r\n}\r\n\r\nexport default Zone;","import React, { Component } from \"react\";\r\nimport Zone from \"./zone/zone\";\r\n\r\nclass Main extends Component {\r\n    render() {\r\n        const { zonesJson } = this.props;\r\n        let zones = [];\r\n        for (let i = 0; i < zonesJson.length; i++) {\r\n            zones.push(zonesJson[i].name);\r\n        }\r\n        const { lessonProgress } = this.props;\r\n        let zonesHtml = [], i = 0, userZones = [], resumeZone = false;\r\n        for (let j = 0; j < lessonProgress.length; j++) {\r\n            if (lessonProgress[j].status)\r\n                userZones.push(lessonProgress[j].zoneName)\r\n            else {\r\n                resumeZone = true;\r\n            }\r\n        }\r\n        while (i < zones.length) {\r\n            if (userZones.find(zone => zone === zones[i])) {\r\n                zonesHtml.push(<Zone zoneData={zonesJson[i]} status=\"completed\" />)\r\n                i++;\r\n            }\r\n            else\r\n                break;\r\n        }\r\n        if (resumeZone)\r\n            zonesHtml.push(<Zone zoneData={zonesJson[i]} status=\"inprogress\" />)\r\n        else if (i < zones.length)\r\n            zonesHtml.push(<Zone zoneData={zonesJson[i]} status=\"start\" />)\r\n        i++;\r\n        while (i < zones.length) {\r\n            zonesHtml.push(<Zone zoneData={zonesJson[i]} status=\"locked\" />);\r\n            i++;\r\n        }\r\n        return (\r\n            <div className=\"zones\">{zonesHtml}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React, { Component } from \"react\";\r\n\r\nimport { Button, Card, CardBody, CardHeader, CardTitle, Collapse, Input } from \"reactstrap\";\r\n\r\nclass VideoButton extends Component {\r\n    render() {\r\n        if (this.props.status)\r\n            return (<Button className=\"instructionFunction\" color=\"success\" onClick={this.props.onClick}>Watch Again</Button>);\r\n        else\r\n            return (<Button className=\"instructionFunction\" color=\"primary\" onClick={this.props.onClick}>Play</Button>)\r\n    }\r\n}\r\n\r\nclass ExerciseButton extends Component {\r\n    render() {\r\n        if (this.props.status === \"completed\")\r\n            return (<Button className=\"instructionFunction\" color=\"success\" onClick={this.props.onClick}>Completed</Button>);\r\n        else if (this.props.status === \"start\")\r\n            return (<Button className=\"instructionFunction\" color=\"primary\" onClick={this.props.onClick}>Start</Button>);\r\n        else if (this.props.status === \"locked\")\r\n            return (<Button className=\"instructionFunction\" color=\"danger\" onClick={this.props.onClick} disabled>Locked</Button>);\r\n        else\r\n            return (<></>);\r\n    }\r\n}\r\n\r\nclass ZoneSection extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            openId: 0,\r\n            startTime: \"\",\r\n            sectionProgress: this.props.sectionProgress\r\n        }\r\n        this.toggle = this.toggle.bind(this);\r\n        this.sendExerciseResponse = this.sendExerciseResponse.bind(this);\r\n        this.completeVideo = this.completeVideo.bind(this);\r\n    }\r\n\r\n    toggle(openId) {\r\n        if (this.state.openId === openId)\r\n            this.setState({\r\n                openId: 0\r\n            });\r\n        else\r\n            this.setState({\r\n                openId: openId,\r\n                startTime: Math.round(new Date().getTime()/1000)\r\n            });\r\n    }\r\n\r\n    sendExerciseResponse(exerciseIndex){\r\n        this.props.sendExerciseResponse(exerciseIndex, this.state.sectionProgress.exercises[exerciseIndex].response, this.state.startTime);\r\n        this.setState({\r\n            openId: 0\r\n        })\r\n    }\r\n\r\n    completeVideo(){\r\n        this.props.completeVideo();\r\n        this.setState({\r\n            openId: 0\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { sectionData } = this.props;\r\n        const exerciseData = sectionData.exercises, exerciseHtml = [], completeVideoButtton = [];\r\n        let exercisesIndex = 0;\r\n        if (!this.state.sectionProgress.video)\r\n            completeVideoButtton.push(<Button color=\"primary\" onClick={() => this.completeVideo()}>Mark Video as complete</Button>)\r\n        else {\r\n            while (exercisesIndex < exerciseData.length && this.state.sectionProgress.exercises[exercisesIndex].status) {\r\n                let toggleIndex = exercisesIndex + 2;\r\n                exerciseHtml.push(\r\n                    <Card>\r\n                        <CardHeader className=\"instructionHeader\">\r\n                            <CardTitle className=\"instruction\">{exerciseData[exercisesIndex].code}</CardTitle>\r\n                            <ExerciseButton status=\"completed\" onClick={() => this.toggle(toggleIndex)} />\r\n                        </CardHeader>\r\n                        <Collapse isOpen={this.state.openId === (toggleIndex)}>\r\n                            <CardBody>\r\n                                {exerciseData[exercisesIndex].desc}\r\n                                <Input\r\n                                    type=\"textarea\"\r\n                                    placeholder=\"Enter your response\" \r\n                                    value={this.state.sectionProgress.exercises[exercisesIndex].response}\r\n                                    onChange={(e) => {\r\n                                        let sectionProgress = this.state.sectionProgress;\r\n                                        sectionProgress.exercises[toggleIndex-2].response = e.target.value\r\n                                        this.setState({\r\n                                            sectionProgress : sectionProgress\r\n                                        })\r\n                                    }} \r\n                                />\r\n                                <Button color=\"primary\" onClick={() => this.sendExerciseResponse(toggleIndex-2)} >Submit</Button>\r\n                            </CardBody>\r\n                        </Collapse>\r\n                    </Card>\r\n                )\r\n                exercisesIndex++;\r\n            }\r\n            if (exercisesIndex < exerciseData.length) {\r\n                let toggleIndex = exercisesIndex + 2;\r\n                exerciseHtml.push(\r\n                    <Card>\r\n                        <CardHeader className=\"instructionHeader\">\r\n                            <CardTitle className=\"instruction\">{exerciseData[exercisesIndex].code}</CardTitle>\r\n                            <ExerciseButton status=\"start\" onClick={() => this.toggle(toggleIndex)} />\r\n                        </CardHeader>\r\n                        <Collapse isOpen={this.state.openId === (toggleIndex)}>\r\n                            <CardBody>\r\n                                {exerciseData[exercisesIndex].desc}\r\n                                <Input\r\n                                    type=\"textarea\"\r\n                                    placeholder=\"Enter your response\" \r\n                                    value={this.state.sectionProgress.exercises[exercisesIndex].response}\r\n                                    onChange={(e) => {\r\n                                        let sectionProgress = this.state.sectionProgress;\r\n                                        sectionProgress.exercises[toggleIndex-2].response = e.target.value\r\n                                        this.setState({\r\n                                            sectionProgress : sectionProgress\r\n                                        })\r\n                                    }} \r\n                                />\r\n                                <Button color=\"primary\" onClick={() => this.sendExerciseResponse(toggleIndex-2)} >Submit</Button>\r\n                            </CardBody>\r\n                        </Collapse>\r\n                    </Card>\r\n                )\r\n                exercisesIndex++;\r\n            }\r\n        }\r\n        while (exercisesIndex < exerciseData.length) {\r\n            let toggleIndex = exercisesIndex + 2;\r\n            exerciseHtml.push(\r\n                <Card>\r\n                    <CardHeader className=\"instructionHeader\">\r\n                        <CardTitle className=\"instruction\">{exerciseData[exercisesIndex].code}</CardTitle>\r\n                        <ExerciseButton status=\"locked\" onClick={() => this.toggle(toggleIndex)} />\r\n                    </CardHeader>\r\n                    <Collapse isOpen={this.state.openId === (toggleIndex)}>\r\n                        <CardBody>\r\n                            {exerciseData[exercisesIndex].desc}\r\n                            <Input type=\"textarea\" placeholder=\"Enter your response\" />\r\n                            <Button color=\"primary\">Submit</Button>\r\n                        </CardBody>\r\n                    </Collapse>\r\n                </Card>\r\n            )\r\n            exercisesIndex++;\r\n        }\r\n        return (<div>\r\n            <Card>\r\n                <CardHeader className=\"instructionHeader\">\r\n                    <CardTitle className=\"instruction\">Play Course Video</CardTitle>\r\n                    <VideoButton status={this.state.sectionProgress.video} onClick={() => this.toggle(1)} />\r\n                </CardHeader>\r\n                <Collapse isOpen={this.state.openId === 1}>\r\n                    <CardBody>\r\n                        <video width=\"400\" controls>\r\n                            <source src={sectionData.video} type=\"video/mp4\" />\r\n                            Your browser doesn't support HTML video\r\n                        </video>\r\n                        {completeVideoButtton}\r\n                    </CardBody>\r\n                </Collapse>\r\n            </Card>\r\n            {exerciseHtml}\r\n        </div>)\r\n    }\r\n}\r\n\r\n\r\nexport default ZoneSection;","import React, { Component } from \"react\";\r\nimport \"./zone-content.css\"\r\n\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Accordion, AccordionItem, AccordionHeader, AccordionBody, Card, CardTitle, CardText, Button, Badge } from \"reactstrap\";\r\nimport ZoneSection from \"./zone-section/zone-section\";\r\n\r\nconst ZoneRoute = (props) => {\r\n    const params = useParams();\r\n    const zoneName = params.zoneName;\r\n    let j = 0;\r\n    for (let i = 0; i < props.lessonProgress.length; i++) {\r\n        if (props.lessonProgress[i].zoneName === zoneName) {\r\n            while (j < props.lessonProgress[i].zoneProgress.length) {\r\n                if (!props.lessonProgress[i].zoneProgress[j].status) {\r\n                    break;\r\n                }\r\n                j++;\r\n            }\r\n        }\r\n    }\r\n    j++;\r\n    return (<ZoneContent activeSectionIndex={j} zoneName={zoneName} lessonProgress={props.lessonProgress} mainApis={props.mainApis} roomManagementApis={props.roomManagementApis} email={props.email} zonesJson={props.zonesJson} />)\r\n}\r\n\r\nclass ZoneContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            sectionsJson: [],\r\n            activeCardNo: 0,\r\n            lessonProgress: this.props.lessonProgress,\r\n            zoneName: this.props.zoneName,\r\n            room: \"\"\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n        this.completeVideo = this.completeVideo.bind(this);\r\n        this.completeExercise = this.completeExercise.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchSectionsJson();\r\n        this.getRoomNo();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.zoneName !== this.props.zoneName) {\r\n            this.fetchSectionsJson();\r\n            this.getRoomNo();\r\n            console.log(\"room updated\")\r\n        }\r\n    }\r\n\r\n    fetchSectionsJson() {\r\n        fetch(process.env.PUBLIC_URL + \"/data/foundation/\" + this.state.zoneName + \".json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        sectionsJson: result.sections,\r\n                        activeCardNo: this.props.activeSectionIndex\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    getRoomNo() {\r\n        let zone = this.state.lessonProgress.find(zone => zone.zoneName === this.props.zoneName);\r\n        console.log(zone);\r\n        if (zone) {\r\n            if (!zone.status) {\r\n                for (let i = 0; i < zone.zoneProgress.length; i++) {\r\n                    if (!zone.zoneProgress[i].status) {\r\n                        fetch(this.props.roomManagementApis.getRoomNo + \"?email=\" + this.props.email + \"&roadmap=foundation&zone=\" + this.state.zoneName + \"&section=Section\" + (i + 1))\r\n                            .then(res => res.json())\r\n                            .then(\r\n                                (result) => {\r\n                                    this.setState({\r\n                                        room: result.roomsName\r\n                                    });\r\n                                },\r\n                                (error) => {\r\n                                    console.error(error);\r\n                                }\r\n                            )\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            fetch(this.props.roomManagementApis.getRoomNo + \"?email=\" + this.props.email + \"&roadmap=foundation&zone=\" + this.state.zoneName + \"&section=Section1\")\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        this.setState({\r\n                            room: result.roomsName\r\n                        });\r\n                    },\r\n                    (error) => {\r\n                        console.error(error);\r\n                    }\r\n                )\r\n        }\r\n    }\r\n\r\n    toggle(cardToggleNo) {\r\n        if (cardToggleNo === this.state.activeCardNo)\r\n            this.setState({\r\n                activeCardNo: 0\r\n            })\r\n        else\r\n            this.setState({\r\n                activeCardNo: cardToggleNo\r\n            })\r\n    }\r\n\r\n    completeVideo(zoneIndex, sectionIndex) {\r\n        let lessonProgress = this.state.lessonProgress;\r\n        lessonProgress[zoneIndex].zoneProgress[sectionIndex].video = true;\r\n        this.updateLessonProgress(lessonProgress, false);\r\n        this.setState({\r\n            lessonProgress: lessonProgress\r\n        })\r\n    }\r\n\r\n    completeExercise(zoneIndex, sectionIndex, exerciseIndex, exerciseResponse, startTime) {\r\n        let lessonProgress = this.state.lessonProgress, activeCardNo = this.state.activeCardNo, updateRoom=false;\r\n        lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises[exerciseIndex].response = exerciseResponse;\r\n        lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises[exerciseIndex].startTime = startTime;\r\n        lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises[exerciseIndex].endTime = Math.round(new Date().getTime() / 1000);\r\n        lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises[exerciseIndex].status = true;\r\n        if (lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises.length === (exerciseIndex + 1)) {\r\n            lessonProgress[zoneIndex].zoneProgress[sectionIndex].status = true;\r\n            if (lessonProgress[zoneIndex].zoneProgress.length === (sectionIndex + 1))\r\n                lessonProgress[zoneIndex].status = true\r\n            else\r\n            updateRoom=true;\r\n        }\r\n        let exerciseData = {\r\n            \"roadmap\": \"foundation\",\r\n            \"zone\": lessonProgress[zoneIndex].zoneName,\r\n            \"sectionIndex\": sectionIndex,\r\n            \"exerciseIndex\": exerciseIndex,\r\n            \"timeTaken\": lessonProgress[zoneIndex].zoneProgress[sectionIndex].exercises[exerciseIndex].endTime - startTime,\r\n            \"startTime\": startTime\r\n        }\r\n        this.updateLessonProgress(lessonProgress, exerciseData);\r\n        if (this.state.sectionsJson[sectionIndex].exercises.length === (exerciseIndex + 1)) {\r\n            activeCardNo++;\r\n        }\r\n        this.setState({\r\n            lessonProgress: lessonProgress,\r\n            activeCardNo: activeCardNo\r\n        })\r\n        if(updateRoom)\r\n        this.getRoomNo();\r\n    }\r\n\r\n    updateLessonProgress(lessonProgress,exerciseUpdate) {\r\n        var lessonProgressDetails = JSON.stringify({\r\n            \"email\": this.props.email,\r\n            \"lessonProgress\": lessonProgress,\r\n            \"exerciseAnalytics\": exerciseUpdate\r\n        });\r\n        let myHeaders = new Headers();\r\n        myHeaders.append(\"Content-Type\", \"application/json\");\r\n        let requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: lessonProgressDetails,\r\n            redirect: 'follow'\r\n        };\r\n        fetch(this.props.mainApis.updateLesson, requestOptions)\r\n            .then(response => response.text())\r\n            .then(response => {\r\n                let result = JSON.parse(response);\r\n                if (result.status !== 200) {\r\n                    alert(\"Couldn't update progress to server\");\r\n                }\r\n            })\r\n            .catch(error => {\r\n                alert(\"Couldn't update progress to server\");\r\n                console.log('error', error)\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { error, isLoaded, sectionsJson, lessonProgress, activeCardNo, room } = this.state;\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            let sectionsHtml = [], sectionPos = 0, zoneProgress, zoneIndex, moveToNextZone = [];\r\n            const { zonesJson, zoneName } = this.props;\r\n            if (!lessonProgress.find(zone => zone.zoneName === zoneName)) {\r\n                let newZoneJson = {\r\n                    \"zoneName\": zoneName,\r\n                    \"status\": false,\r\n                    \"zoneProgress\": []\r\n                }\r\n                for (let i = 0; i < sectionsJson.length; i++) {\r\n                    newZoneJson.zoneProgress.push({\r\n                        \"status\": false,\r\n                        \"video\": false,\r\n                        \"exercises\": []\r\n                    })\r\n                    for (let j = 0; j < sectionsJson[i].exercises.length; j++) {\r\n                        newZoneJson.zoneProgress[i].exercises.push({\r\n                            \"status\": false,\r\n                            \"startTime\": \"\",\r\n                            \"endTime\": \"\",\r\n                            \"response\": \"\"\r\n                        })\r\n\r\n                    }\r\n                }\r\n                lessonProgress.push(newZoneJson);\r\n                this.setState({\r\n                    lessonProgress: lessonProgress\r\n                })\r\n            }\r\n            zoneProgress = lessonProgress.find(zone => zone.zoneName === zoneName).zoneProgress;\r\n            zoneIndex = lessonProgress.findIndex(zone => zone.zoneName === zoneName);\r\n            if (lessonProgress.find(zone => zone.zoneName === zoneName).status && zonesJson.length !== (zoneIndex + 1)) {\r\n                moveToNextZone.push(\r\n                    <Card\r\n                        body\r\n                        className=\"text-center\"\r\n                    >\r\n                        <CardTitle tag=\"h5\">\r\n                            Zone Completed\r\n                        </CardTitle>\r\n                        <CardText>\r\n                            Congratulations on completing this zone, you can move to next zone by clicking on the button below.\r\n                        </CardText>\r\n                        <Link to={`/zone/${zonesJson[zoneIndex + 1].name}`}>\r\n                            <Button color=\"primary\">Go to Next Zone</Button>\r\n                        </Link>\r\n                    </Card>\r\n                )\r\n            }\r\n            while (sectionPos < sectionsJson.length && zoneProgress[sectionPos].status === true) {\r\n                let toggleValue = sectionPos + 1;\r\n                sectionsHtml.push(\r\n                    <AccordionItem>\r\n                        <AccordionHeader targetId={toggleValue}>\r\n                            {sectionsJson[sectionPos].desc}\r\n                        </AccordionHeader>\r\n                        <AccordionBody accordionId={toggleValue}>\r\n                            <ZoneSection completeVideo={() => this.completeVideo(zoneIndex, toggleValue - 1)} sendExerciseResponse={(exerciseIndex, exerciseResponse, startTime) => this.completeExercise(zoneIndex, toggleValue - 1, exerciseIndex, exerciseResponse, startTime)} sectionProgress={zoneProgress[sectionPos]} sectionData={sectionsJson[sectionPos]} />\r\n                        </AccordionBody>\r\n                    </AccordionItem>\r\n                );\r\n                sectionPos++;\r\n            }\r\n            if (sectionPos < sectionsJson.length) {\r\n                let toggleValue = sectionPos + 1, roomInfo = [];\r\n                if (activeCardNo === toggleValue)\r\n                    roomInfo.push(\r\n                        <Badge color=\"primary\">{room}</Badge>\r\n                    )\r\n                sectionsHtml.push(\r\n                    <AccordionItem>\r\n                        <AccordionHeader targetId={toggleValue}>\r\n                            {sectionsJson[sectionPos].desc}\r\n                            {roomInfo}\r\n                        </AccordionHeader>\r\n                        <AccordionBody accordionId={toggleValue}>\r\n                            <ZoneSection completeVideo={() => this.completeVideo(zoneIndex, toggleValue - 1)} sendExerciseResponse={(exerciseIndex, exerciseResponse, startTime) => this.completeExercise(zoneIndex, toggleValue - 1, exerciseIndex, exerciseResponse, startTime)} sectionProgress={zoneProgress[sectionPos]} sectionData={sectionsJson[sectionPos]} />\r\n                        </AccordionBody>\r\n                    </AccordionItem>\r\n                );\r\n                sectionPos++;\r\n            }\r\n            while (sectionPos < sectionsJson.length) {\r\n                let toggleValue = sectionPos + 1;\r\n                sectionsHtml.push(\r\n                    <AccordionItem>\r\n                        <AccordionHeader targetId={toggleValue}>\r\n                            {sectionsJson[sectionPos].desc}\r\n                        </AccordionHeader>\r\n                        <AccordionBody>\r\n                            <ZoneSection completeVideo={() => this.completeVideo(zoneIndex, toggleValue - 1)} sectionProgress={zoneProgress[sectionPos]} sectionData={sectionsJson[sectionPos]} />\r\n                        </AccordionBody>\r\n                    </AccordionItem>\r\n                );\r\n                sectionPos++;\r\n            }\r\n            return (\r\n                <div key={this.props.zoneName} className=\"sections\">\r\n                    <Link to={`/home`}><Button color=\"primary\">Back to Home</Button></Link>\r\n                    <Accordion open={this.state.activeCardNo} toggle={this.toggle}>\r\n                        {sectionsHtml}\r\n                    </Accordion>\r\n                    {moveToNextZone}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default ZoneRoute;","import React, { Component } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './start-page.css';\r\n\r\nclass StartPage extends Component {\r\n    render() {\r\n        return (<div id='start_page'>\r\n            <div id='loginOptions'>\r\n                <Link to={`/signup`}><Button color=\"primary\" className='loginButtons'>Sign Up</Button></Link>\r\n                <div id='or'>OR</div>\r\n                <Link to={`/login`}><Button color=\"primary\" className='loginButtons'>Login</Button></Link>\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default StartPage;","import React, { Component } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\r\n\r\nconst NavigateToStartPage = ({nav}) => {\r\n    const navigate = useNavigate();\r\n\r\n    if(nav)\r\n    navigate('/startpage');\r\n\r\n    return (\r\n        <></>\r\n    );\r\n}\r\n\r\n\r\nclass SignUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            emails: [],\r\n            navigate: false\r\n        }\r\n        this.signUpAccount = this.signUpAccount.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        fetch(this.props.signUpApis.getEmails)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        emails: result\r\n                    });\r\n                }\r\n            )\r\n    }\r\n    signUpAccount(event) {\r\n        event.preventDefault();\r\n        if (this.state.emails.find(email => email === this.email.value)) {\r\n            alert(\"Account with this email altready exists\");\r\n            return;\r\n        }\r\n        if (this.password.value !== this.confirmPassword.value) {\r\n            alert(\"Passwords didn't match\");\r\n            return;\r\n        }\r\n        var newUserData = JSON.stringify({\r\n            \"emailId\": this.email.value,\r\n            \"name\": this.name.value,\r\n            \"password\": this.password.value\r\n        });\r\n        this.sendSignUpToServerAndReportToUser(newUserData);\r\n    }\r\n    sendSignUpToServerAndReportToUser(dataToSend) {\r\n        let myHeaders = new Headers();\r\n        myHeaders.append(\"Content-Type\", \"application/json\");\r\n        let requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: dataToSend,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        fetch(this.props.signUpApis.createUser, requestOptions)\r\n            .then(response => response.text())\r\n            .then(response => {\r\n                let result = JSON.parse(response);\r\n                if (result.statusCode === 200) {\r\n                    alert(result.body);\r\n                    this.setState({\r\n                        navigate: true\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                alert(\"Account Creation Failed\");\r\n                console.log('error', error)\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.signUpAccount}>\r\n                <FormGroup>\r\n                    <Label for=\"email\">\r\n                        Email\r\n                    </Label>\r\n                    <Input\r\n                        id=\"signupEmail\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter your email ID\"\r\n                        type=\"email\"\r\n                        innerRef={(input) => this.email = input}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"name\">\r\n                        Name\r\n                    </Label>\r\n                    <Input\r\n                        id=\"signupName\"\r\n                        name=\"name\"\r\n                        placeholder=\"Enter your Name\"\r\n                        type=\"text\"\r\n                        innerRef={(input) => this.name = input}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"password\">\r\n                        Password\r\n                    </Label>\r\n                    <Input\r\n                        id=\"signupPassword\"\r\n                        name=\"password\"\r\n                        placeholder=\"Enter password\"\r\n                        type=\"password\"\r\n                        innerRef={(input) => this.password = input}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"confirmPassword\">\r\n                        Confirm Password\r\n                    </Label>\r\n                    <Input\r\n                        id=\"signupConfirmPassword\"\r\n                        name=\"confirmPassword\"\r\n                        placeholder=\"Re-Enter your password\"\r\n                        type=\"password\"\r\n                        innerRef={(input) => this.confirmPassword = input}\r\n                    />\r\n                </FormGroup>\r\n                <Button type=\"submit\" color=\"primary\">\r\n                    Submit\r\n                </Button>\r\n                <NavigateToStartPage nav={this.state.navigate} />\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SignUp;","import React, { Component } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\r\n\r\nconst NavigateToHome = ({ nav }) => {\r\n    const navigate = useNavigate();\r\n\r\n    if (nav)\r\n        navigate('/home');\r\n\r\n    return (\r\n        <></>\r\n    );\r\n}\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            navigate: false\r\n        }\r\n        this.login = this.login.bind(this);\r\n    }\r\n    login(event) {\r\n        event.preventDefault();\r\n        fetch(`${this.props.loginApis.loginUser}?email=${this.email.value}&password=${this.password.value}`)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    if (result.authorized) {\r\n                        this.props.getLessonProgressEmailAndUserName(result.lessonProgress, this.email.value, result.name);\r\n                        this.setState({\r\n                            navigate: true\r\n                        })\r\n                    }\r\n                    else\r\n                    alert(\"Incorrect email or password\");\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.login}>\r\n                <FormGroup>\r\n                    <Label for=\"email\">\r\n                        Email\r\n                    </Label>\r\n                    <Input\r\n                        id=\"loginEmail\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter your email ID\"\r\n                        type=\"email\"\r\n                        innerRef={(input) => this.email = input}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"password\">\r\n                        Password\r\n                    </Label>\r\n                    <Input\r\n                        id=\"loginPassword\"\r\n                        name=\"password\"\r\n                        placeholder=\"Enter password\"\r\n                        type=\"password\"\r\n                        innerRef={(input) => this.password = input}\r\n                    />\r\n                </FormGroup>\r\n                <Button type=\"submit\" color=\"primary\">\r\n                    Submit\r\n                </Button>\r\n                <NavigateToHome nav={this.state.navigate} />\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import './App.css';\r\nimport React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Spinner } from 'reactstrap';\r\nimport { HashRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\r\n\r\nimport Header from './components/header/header';\r\nimport Main from './components/main/main';\r\nimport ZoneRoute from './components/zone-content/zone-content'\r\nimport StartPage from './components/start-page/start-page';\r\nimport SignUp from './components/signup/signup';\r\nimport Login from './components/login/login';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      baseFile: false,\r\n      lessonProgress: false,\r\n      zonesJson:[],\r\n      email:\"\",\r\n      userName: false\r\n    }\r\n    this.getLessonProgressEmailAndUserName = this.getLessonProgressEmailAndUserName.bind(this);\r\n    this.logout = this.logout.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    fetch(process.env.PUBLIC_URL + \"/data/index.json\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            baseFile: result\r\n          });\r\n        }\r\n      )\r\n      fetch(process.env.PUBLIC_URL + \"/data/roadmap_foundation.json\")\r\n      .then(res => res.json())\r\n      .then(\r\n          (result) => {\r\n              this.setState({\r\n                  zonesJson: result.zones\r\n              });\r\n          }\r\n      )\r\n  }\r\n  getLessonProgressEmailAndUserName(lessonProgress, email, userName) {\r\n    this.setState({\r\n      lessonProgress: lessonProgress,\r\n      email: email,\r\n      userName: userName\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    this.setState({\r\n      userName: false\r\n    })\r\n  }\r\n  render() {\r\n    if (this.state.baseFile)\r\n    return (\r\n          <div className=\"App\">\r\n            <Router>\r\n              <Header userName={this.state.userName} email={this.state.email} logoutApi={this.state.baseFile.apis.login.logout} logout={this.logout} />\r\n              <Routes>\r\n                <Route exact path=\"/\" element={<Navigate to=\"/startpage\" />} />\r\n                <Route exact path=\"/startpage\" element={<StartPage />} />\r\n                <Route exact path=\"/signup\" element={<SignUp signUpApis={this.state.baseFile.apis.signUp} />} />\r\n                <Route exact path=\"/login\" element={<Login loginApis={this.state.baseFile.apis.login} getLessonProgressEmailAndUserName={this.getLessonProgressEmailAndUserName} />} />\r\n                <Route exact path=\"/home\" element={<Main lessonProgress={this.state.lessonProgress} zonesJson={this.state.zonesJson} />} />\r\n                <Route exact path=\"/zone/:zoneName\" element={<ZoneRoute lessonProgress={this.state.lessonProgress} mainApis={this.state.baseFile.apis.main} roomManagementApis={this.state.baseFile.apis.roomManagement} email={this.state.email} zonesJson={this.state.zonesJson} />} />\r\n              </Routes>\r\n            </Router>\r\n          </div>\r\n        );\r\n      else\r\n        return (\r\n          <div className=\"App\">\r\n            <Header />\r\n            <div id=\"loadingApp\">\r\n              <Spinner id='appSpinner'>\r\n                Loading...\r\n              </Spinner>\r\n            </div>\r\n          </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}